window.blog={"uid":"1430235963","post":[{"title":"复习要点12：可编程控制基础、梯形图与语句表","date":"2019-10-15 11:24:38","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102yshf.html","content":"<p>&#9632;PLC工作原理</p>\n<p>（1）PLC实质是一种用于工业控制的专用计算机，其硬件结构基本上与微型计算机是相同的。</p>\n<p>（2）PLC投入运行后，其工作过程一般分为输入采样、用户程序执行和输出刷新等三个阶段。这三个阶段的一次顺次完成称作一个扫描周期。在整个运行期间，PLC的CPU以一定的扫描速度重复上述三个阶段的工作执行。</p>\n<p>（3）PLC的用户程序会使用到许多继电器、计时器与计数器等元件，但PLC内部并非实际配置有这些硬件，而是由系统程序提供的虚拟元件（称为软元件），并通过输出部件连接外部装置实现实体控制，如此可极大减少控制器所需的硬件空间与成本。</p>\n<p>&#9632;语句表</p>\n<p>（1）PLC能够直接识别执行的操作指令称为其编程指令，一个PLC所具有的这种指令的全体称为该PLC的指令系统。</p>\n<p>（2）语句表程序设计语言是用布尔助记符来描述程序的一种程序设计语言。语句表程序设计语言与计算机中的汇编语言非常相似，采用布尔助记符来表示PLC的基本操作功能。语句表语句可与PLC的编程指令直接对应。</p>\n<p>（3）语句表程序设计语言具有下列特点：</p>\n<p>采用助记符来表示操作功能，具有容易记忆，便于撑握的特点；</p>\n<p>在编程器的键盘上采用助记符表示，具有便于操作的特点，可在无计算机的场合进行编程设计；</p>\n<p>用编程软件可以将语句表与梯形图可以相互转换。</p>\n<div>（4）三菱FX2N系列PLC基本指令</div>\n<div>\n<table style=\"margin: 0px; border: medium; border-image: none; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr style=\"mso-yfti-irow:0;mso-yfti-firstrow:yes\">\n<td>\n<p>\n<b style=\"mso-bidi-font-weight:normal\">序号</b></p>\n</td>\n<td>\n<p>\n<b style=\"mso-bidi-font-weight:normal\">指令</b></p>\n</td>\n<td>\n<p>\n<b style=\"mso-bidi-font-weight:normal\">描述</b></p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:1\">\n<td>\n<p>1</p>\n</td>\n<td>\n<p>LD</p>\n</td>\n<td>\n<p>取常开接点状态指令，目标元件是X、Y、M、S、T、C。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:2\">\n<td>\n<p>2</p>\n</td>\n<td>\n<p>LDI</p>\n</td>\n<td>\n<p>取常闭接点状态指令，目标元件是X、Y、M、S、T、C。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:3;height:115.15pt\">\n<td>\n<p>3</p>\n</td>\n<td>\n<p>OUT</p>\n</td>\n<td>\n<p>线圈驱动指令，是对输出继电器（Y）、辅助继电器（M）、状态器（S）、定时器（T）、计数器（C）的线圈驱动，对输入继电器（X）不能使用。当OUT指令驱动的目标元件是定时器T和计数器C时，如设定值是常数K时，则K的设定范围如下表所示：</p>\n<table style=\"margin: 0px 0px 0px 7.2px; border: medium; border-image: none; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr style=\"mso-yfti-irow:0;mso-yfti-firstrow:yes;height:10.1pt\">\n<td>\n<p>定时器、计数器</p>\n</td>\n<td>\n<p>&nbsp;&nbsp;&nbsp;K的设定范围</p>\n</td>\n<td>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;实际的设定值</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:1;page-break-inside:avoid;height:3.5pt\">\n<td>\n<p>1ms定时器</p>\n</td>\n<td>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1~32767</p>\n</td>\n<td>\n<p>0.001~32.767s</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:2;page-break-inside:avoid;height:3.5pt\">\n<td>\n<p>10ms定时器</p>\n</td>\n<td>\n<p>0.01~327.67s</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:3;page-break-inside:avoid;height:3.5pt\">\n<td>\n<p>100ms 定时器</p>\n</td>\n<td>\n<p>0.1~3276.7</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:4;page-break-inside:avoid;height:3.5pt\">\n<td>\n<p>16位计数器</p>\n</td>\n<td>\n<p>1~32767</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:5;mso-yfti-lastrow:yes;page-break-inside:avoid; height:3.5pt\">\n<td>\n<p>32位计数器</p>\n</td>\n<td>\n<p>﹣2147483648 ~﹢2147483647</p>\n</td>\n<td>\n<p>﹣2147483648 ~﹢2147483647</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:4\">\n<td>\n<p>4</p>\n</td>\n<td>\n<p>AND</p>\n</td>\n<td>\n<p>接点串联指令，用于单个常开接点的串联</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:5\">\n<td>\n<p>5</p>\n</td>\n<td>\n<p>ANI</p>\n</td>\n<td>\n<p>接点串联指令，用于单个常闭接点的串联</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:6\">\n<td>\n<p>6</p>\n</td>\n<td>\n<p>OR</p>\n</td>\n<td>\n<p>接点并联指令，用于单个的常开接点并联</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:7\">\n<td>\n<p>7</p>\n</td>\n<td>\n<p>ORI</p>\n</td>\n<td>\n<p>接点并联指令，用于单个的常闭接点并联</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:8\">\n<td>\n<p>8</p>\n</td>\n<td>\n<p>LDP、ANDP、ORP</p>\n</td>\n<td>\n<p>接点上升沿检测指令，仅在指定的位元件上升沿（OFF→ON变化时）时，接通一个扫描周期，操作的目标元件是X、Y、M、S、T、C。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:9\">\n<td>\n<p>9</p>\n</td>\n<td>\n<p>LDF、ANDF、ORF</p>\n</td>\n<td>\n<p>接点下降沿检测指令，仅在指定位元件下降时（即由ON→OFF变化时）接通1个扫描周期，操作的目标元件是X、Y、M、S、T、C。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:10\">\n<td>\n<p>10</p>\n</td>\n<td>\n<p>ORB</p>\n</td>\n<td>\n<p>串联电路块并联指令。两个或两个以上的接点串联的电路称为串联电路块。当串联电路块和其它电路并联时连接时，分支开始用LD、LDI，分支结束用ORB。ORB指令是不带操作数的独立指令。电路中有多少个串联电路块就用多少次ORB，ORB使用的次数不受限制。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:11\">\n<td>\n<p>11</p>\n</td>\n<td>\n<p>ANB</p>\n</td>\n<td>\n<p>并联电路块串联指令。两个或两个以上接点并联的电路称为并联电路块。并联电路块和其它接点串联连接时，电路块的起点用LD、LDI指令，并联电路块结束后，使用ANB指令与前面串联。ANB指令是无操作目标元件的指令。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:12\">\n<td>\n<p>12</p>\n</td>\n<td>\n<p>MPS、MRD、MPP</p>\n</td>\n<td>\n<p>多重输出指令。在PLC中有11个存储器，它们用来存储运算的中间结果，被称为栈存储器。使用1次MPS指令就将此时的运算结果送入栈存储器的第1段。再使用MPS指令，又将此时刻的运算结果送入栈存储器的第1段，而将原先存入的数据依此移到栈存储器的下一段。使用MPP指令，各数据按顺序向上移动，将最上段的数据读出，同时该数据就从栈存储器中消失。MRD是读出最上段所存的最新数据的专用指令，同时栈存储器内的数据不发生移动。这些指令都是不带操作数的独立指令。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:13\">\n<td>\n<p>13</p>\n</td>\n<td>\n<p>MC、MCR</p>\n</td>\n<td>\n<p>主控及主控复位指令。MC为主控指令，用于公共串联触点的连接；MCR为主控复位指令，用于公共串联触点的清除。&nbsp;&nbsp;&nbsp;&nbsp;主控（MC）指令后，母线（LD、LDI点）移到主控触点后，MCR为将其返回原母线的指令。通过更改软元件地址号Y，M，可多次使用主控指令，但不同的主控指令不能使用同一软件号，否则就是双线圈输出。当出现双线圈输出时，前面的输出不起作用，只有最后的一条输出才起作用。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:14\">\n<td>\n<p>14</p>\n</td>\n<td>\n<p>INV</p>\n</td>\n<td>\n<p>取反指令。INV指令将执行INV指令之前的运算结果反转，是不带操作数的独立指令。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:15\">\n<td>\n<p>15</p>\n</td>\n<td>\n<p>SET、RST</p>\n</td>\n<td>\n<p>置位与复位指令。SET为置位指令，使动作保持；RST复位指令，使操作保持复位。SET指令的操作目标元件为Y、M、S，而RST指令的操作元件是Y、M、S、D、V、Z、T、C。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:16\">\n<td>\n<p>16</p>\n</td>\n<td>\n<p>PLS、PLF</p>\n</td>\n<td>\n<p>微分输出指令。PLS为上升沿微分输出，当输入条件为ON时（上升沿），相应的输出位元件Y或M接通一个扫描周期。PLF为下降沿微分输出，当输入条件为OFF时（下降沿），相应的输出位元件Y或M接通一个扫描周期。该两条指令都是2个程序步，目标元件是Y和M（特殊辅助继电器不能作为目标元件）。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:17\">\n<td>\n<p>17</p>\n</td>\n<td>\n<p>NOP</p>\n</td>\n<td>\n<p>空操作指令。NOP指令不带操作数，在普通指令之间插入NOP指令，对程序执行结果没有影响，但是将已写入的指令换成NOP，则被换的程序被删除，程序发生变化。所以用NOP指令可以对程序进行编辑。</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:18;mso-yfti-lastrow:yes\">\n<td>\n<p>18</p>\n</td>\n<td>\n<p>END</p>\n</td>\n<td>\n<p>程序结束指令。当一个程序结束时，后面用END，写在END后的程序不能被执行。如果程序结束不用END，在程序执行时会扫描完整个用户存储器，延长程序的执行时间，有的PLC还会提示程序出错，程序不能运行。</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>&#9632;梯形图</p>\n<p>PLC的编程语言一般首选梯形图。梯形图编程的基本规则如下：</p>\n<p>（1）输入/输出继电器、内部继电器、定时器、计数器等元件的接点可多次重复使用，不必使用复杂的程序结构减少对接点的使用次数。</p>\n<p>（2）梯形图每一行都从左母线开始，线圈终止于右母线。接点不能放在线圈的右边。</p>\n<p>（3）接点应在水平线上，不能在垂直分支线，不允许出现桥式电路。</p>\n<p>（4）除了步进程序外，任何线圈、定时器、计数器、高级指令等不能与左母线直接相连。</p>\n<p>（5）不允许同一编号的线圈两次输出（即双线圈输出），避免双线圈的方法是把相关的控制并联或引入辅助继电器。</p>\n<p>（6）程序编写顺序应按自上而下，从左至右的方式编写。为了减少程序的步数，程序应为左大右小、上大下小。接点多的写在上方则可以少用或不用ORB指令，将并联电路块写在右边则可以少用或不用ANB指令。</p>\n</div>"},{"title":"复习要点11：干扰与抗干扰、软件抗干扰","date":"2019-10-15 10:27:31","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102yshe.html","content":"&#9632;干扰、内部干扰与外部干扰<div>\n<p>（1）干扰就是有用信号以外的噪声或破坏设备正常工作的因素；</p>\n<p>（2）由外界环境因素如空间电磁、环境温度、湿度、气体、粉尘等影响决定的，与系统结构无关的干扰称为外部干扰；</p>\n<p>（3）由系统内部结构、部件、制造工艺及自身工况决定的如分布电容电感耦合感应、电磁场辐射感应、长线传输波反射、多点接地电位差、寄生振荡、元器件噪声等的干扰为内部干扰。</p>\n<p>&#9632;硬件抗干扰与软件抗干扰</p>\n<p>抗干扰技术就是要分析干扰的产生、传播方式，并针对性地采用硬件或软件的方法消减或对抗干扰的影响。硬件抗干扰的效率高，但会增加系统设备投资及设备体积；软件抗干扰的投资低，但需占用CPU的时间，可能会降低系统工作效率。</p>\n<p>&#9632;串模干扰与共模干扰</p>\n<p>（1）串模干扰就是叠加在被测信号上的干扰信号，通常是由两条信号线本身作为回路时，由于外界干扰源或设备内部本身耦合而产生干扰信号，也称为差模干扰、常态干扰。针对不同的应用，常用抑制串模干扰的方法包括：</p>\n<p>&#9312;采用低通滤波器、高通滤波器或带通滤波器抑制特定频段串模干扰</p>\n<p>&#9313;双积分式A/D转换器可抑制尖峰型串模干扰</p>\n<p>&#9314;前端放大或前端A/D转换以及隔离屏蔽对应电磁感应带来的串模干扰</p>\n<p>&#9315;选择特定逻辑器件抑制内部低噪声或高频串模干扰</p>\n<p>&#9316;双绞线或屏蔽线作信号引线减少电磁感应带来的串模干扰</p>\n<p>（2）共模干扰是指被测信号到检测设备输入端上公有的干扰信号，也称为共态干扰，有时也称为纵模干扰，不对称干扰或接地干扰。消除共模干扰的方法包括：</p>\n<p>&#9312;采用屏蔽双绞线并有效接地</p>\n<p>&#9313;强电场附近考虑采用镀锌管屏蔽</p>\n<p>&#9314;分离布线，信号线远离高压线</p>\n<p>&#9315;与易产生干扰设备的电源隔离</p>\n<p>&#9316;采用线性稳压电源或高品质的开关电源</p>\n<p>&#9317;使用差分式电路</p>\n<p>&#9318;采用终端阻抗匹配或始端阻抗匹配可消除长线传输中的波反射或将其抑制到最低限度</p>\n<p>&#9319;信号隔离或浮地屏蔽使共模电压难以形成回路</p>\n<p>&#9632;CPU及软件抗干扰方法</p>\n<p>（1）电压监控（看门狗）与系统复位</p>\n<p>（2）掉电保护与恢复运行</p>\n<p>（3）指令冗余与软件陷阱</p>\n<p>（4）网络及本地多任务监视</p>\n<p>（5）数字与模拟信号的数字滤波</p>\n<p>&#9632;数字滤波技术</p>\n<p>（1）算术平均值法</p>\n<p>（2）中位值滤波法</p>\n<p>（3）限幅滤波法</p>（4）惯性滤波法</div>"},{"title":"51单片机硬件基础要点汇总","date":"2018-12-24 12:00:00","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102yhz3.html","content":"<h1 align=\"center\" style=\"margin: 22.66px 0px 22px; text-align: center;\"><font face=\"Calibri\">51</font>单片机硬件基础要点汇总</h1>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（1）51单片机基本特性</font></h2>\n<p>51系列单片机品种很多，其典型产品有8031、8051、8751和89C51等。8031片内无ROM程序存储器，8051片内有4KB ROM程序存储器，8751片内有4KB EPROM程序存储器，89C51片内有4KB FLASH E<sup>2</sup>PROM程序存储器。上述基本型51单片机具有如下共同特性：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;8位CPU；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;128B的数据存储器；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;32根I/O线；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;64KB的片外程序存储器寻址能力；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;64KB的片外数据存储器寻址能力；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;1个全双工的异步串行口；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;2个16位定时/计数器；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;5个中断源，2个优先级；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;4KB的程序存储器(8051、8751、89C51)；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;21个特殊功能寄存器；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;1个片内时钟振荡器和时钟电路。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增强型(如8032、8052、8752、89C52)是在基本型的基础上，内部ROM、RAM容量增大一倍，同时定时器增为3个。增强型51单片机增加有如下共同特性：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;256B的数据存储器；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;8KB的片内程序存储器(8052、8752、89C52)；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;3个16位定时/计数器；</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;6个中断源，2个优先级。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（2）程序状态字</font></h2>\n<p>程序状态字寄存器(PSW)是一个8位的特殊寄存器，它保存ALU运算结果的特征和处理状态，以供程序查询和判别。PSW中各位状态信息通常是指令执行过程中自动形成的，但也可以由用户根据需要加以改变。PSW中各位的定义如下：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;CY(PSW.7)：进位标志。无符号数运算中，当加法或减法运算最高位有进位或借位时，(CY)=1；当加法或减法运算时，最高位无进位或借位，(CY)=0。CY位主要用在多字节的加减法运算中。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;AC(PSW.6)：辅助进位标志。无符号数运算中，当加法或减法运算时，低4位向高4位有进位或借位，(AC)=1；当加法或减法运算时，低4位向高4位无进位或借位，(AC)=0。AC位常作为计算机进行BCD码修正的判断依据。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;F0(PSW.5)：用户标志位。无特别意义，供用户自行定义。通过软件置位或清零，并根据(F0)=1或0来反映系统某一种工作状态，决定程序的执行方式。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;RS1、RS0(PSW.4、PSW.3)：工作寄存器组选择位。可用软件置位或清零，用于选定当前使用的4个工作寄存器组中的某一组。具体将在存储器结构部分中介绍。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;OV(PSW.2)：溢出标志。主要用在有符号数运算时，运算结果超出了范围时，(OV)=1；否则，(OV)=0。如为8位运算，若结果超过了8位补码所能表示的范围－128～＋127，则(OV)=1。计算机在数据处理过程中，对于加减运算，OV置位和清位的依据是(OV)=(C)&oplus;(C7.6)，其中C7.6为运算过程中第6位（次高位）向第7位（最高位）的进位或借位。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;P(PSW.0)：奇偶标志位。在执行指令后，单片机根据累加器A的8位二进制数中“1”的个数的奇偶，自动给该标志置位或清零。若累加器A的8位二进制数中“1”的个数为奇数，则(P)=1；若累加器A中“1”的个数为偶数，则(P)=0。该标志对串行通信的数据传输非常有用，通过奇偶校验可检验传输的可靠性。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><a name=\"_Hlk501567652\"><font face=\"等线 Light\">（3）重要控制引脚</font></a></h2>\n<p>RST引脚为单片机的上电复位端。当单片机振荡器工作时，该引脚上出现持续两个机器周期的高电平，就可实现复位操作，使单片机回复到初始状态。</p>\n<p>EA为片内外程序存储器选用端。该引脚为低电平时，只选用片外程序存储器；该引脚为高电平时，先选用片内程序存储器，然后选用片外程序存储器。</p>\n<p>ALE为地址锁存允许信号输出，高电平有效。当8051单片机上电正常工作时，自动在该引脚上输出频率为fosc/6的脉冲序列。当CPU访问外部存储器时，此信号作为锁存P0口输出的低8位地址的控制信号。</p>\n<p>PSEN为外部程序存储器选通信号，低电平有效。当从外部程序存储器读取指令或数据期间，每个机器周期该信号两次有效，以通过数据总线P0口读取指令或数据。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（4）基本时钟</font></h2>\n<p>8051的时钟产生方式分为内部振荡方式和外部时钟方式两种方式。晶体振荡信号或外部时钟信号的周期称为振荡周期，是指为单片机提供时钟脉冲信号的振荡源的周期。振荡周期是单片机所能分辨的最小时间单位，是最小的时序单位，片内的各种微操作都以振荡周期为时序基准。晶体振荡信号或外部时钟信号经分频器2分频后形成两相错开的时钟信号P1和P2。时钟信号的周期称为时钟周期，也称为状态周期，它是振荡周期的2倍，是振荡周期经2分频后得到的。即一个时钟周期包含两个振荡周期。在每个时钟周期的前半周期，相位1(P1)信号有效，在每个时钟周期的后半周期，相位2(P2)信号有效。</p>\n<p>CPU完成一种基本操作所需要的时间称为机器周期。一个机器周期由12个振荡周期或6个状态周期构成。CPU执行一条指令所需要的时间称作指令周期。<a name=\"_Hlk501571190\">8051</a>单片机的指令按执行时间可以分为三类：单周期指令、双周期指令和四周期指令。四周期指令只有乘、除法两条指令。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（5）存储空间</font></h2>\n<p>8051单片机的存储器地址空间可分为片内程序存储器地址空间、片外程序存储器地址空间、片外数据存储器地址空间、特殊功能寄存器地址空间、片内数据存储器地址空间等5块。</p>\n<p>程序存储器低端的一些地址被固定地用作特定程序的入口地址：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;0000H——单片机复位后的程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;0003H——外部中断0的中断服务子程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;000BH——定时/计数器0的中断服务子程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;0013H——外部中断1的中断服务子程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;001BH——定时/计数器1的中断服务子程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;0023H——串行口的中断服务子程序入口地址。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;002BH——定时器2的中断服务子程序入口地址。</p>\n<p>8051单片机片内RAM共有128字节，分成工作寄存器区、位地址区、通用RAM区3部分。工作寄存器区为片内RAM地址为00H～1FH的32个字节，分成4个工作寄存器组，每组占8个字节。程序运行时，只能有一个工作寄存器组作为当前工作寄存器组。当前工作寄存器组的选择是由特殊功能寄存器中的程序状态字寄存器PSW的RS1、RS0两位决定的。系统复位后，PSW的RS1、RS0两位的值为00，即初始默认选择第0组工作寄存器为当前工作寄存器组。地址20H～2FH的16字节RAM为位地址区，有双重寻址功能，既可以进行位寻址操作，也可以同普通RAM单元一样按字节寻址操作，共有128位，每一位都有相对应的位地址，位地址范围为00H～7FH。工作寄存器区、位寻址区的字节单元也可用作一般的数据缓冲区。</p>\n<p>SP寄存器的初值为07H，当有数据进入堆栈时，将从08H单元开始存放，这一般是不允许的，因为内部RAM单元08H～1FH属于工作寄存器区，一般不宜占用；而内部RAM单元20H～2FH是位地址区，也需要部分或全部保留。因此，必须通过数据传送指令重新设置SP的初值，将堆栈底部设在30H～7FH之间。</p>\n<p>8051单片机内部设置了21个特殊功能寄存器(SFR)，离散地分布在80H～0FFH的地址空间中，其中字节地址能被8整除(即16进制地址码尾数为0或8)的单元具有位寻址的能力。</p>\n<p>数据入栈的操作过程为：先将SP加1，即(SP)←(SP)＋1，然后将要入栈的数据存放在SP指定的存储单元中。而数据出栈时，先将SP寄存器指定的存储单元内容传送到POP指令给定的寄存器或内部RAM单元中，然后SP减1，即(SP)←(SP)－1。可以看出堆栈的底部是固定的，而堆栈的顶部则随着数据入栈和出栈而上下浮动。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（6）复位状态</font></h2>\n<p>8051单片机复位后的基本状态如下：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;程序计数器PC的内容为0000H，即复位后将从程序存储器的0000H单元读取第一条指令码。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(PSW)=00H，由于(RS1)=0，(RS0)=0，复位后单片机选择工作寄存器0组。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(SP)=07H，复位后堆栈在片内RAM的08H单元处</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;TH1、TL1、TH0、TL0的内容为00H，定时/计数器的初值为0。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(TMOD)=00H，复位后定时/计数器T0、T1为定时器方式0。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(TCON)=00H，复位后定时/计数器T0、T1停止工作，外部中断0、1为电平触发方式。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(SCON)=00H，复位后串行口工作在移位寄存器方式，且禁止串行口接收。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(IE)=00H，复位后屏蔽所有中断。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;(IP)=00H，复位后所有中断源都设置为低优先级。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;P0～P3口锁存器都是全1状态，说明复位后4个并行接口设置为输入口。</p>\n<p>复位后，程序存储器内容不变。片内RAM和片外RAM的内容在上电复位后为随机数，而在手动复位后，原数据保持不变。</p>\n<div align=\"center\">\n<table style=\"margin: 0px; border: medium; border-image: none; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr style=\"mso-yfti-irow:0;mso-yfti-firstrow:yes\">\n<td>\n<p>寄存器</p>\n</td>\n<td>\n<p>复位状态</p>\n</td>\n<td>\n<p>寄存器</p>\n</td>\n<td>\n<p>复位状态</p>\n</td>\n<td>\n<p>寄存器</p>\n</td>\n<td>\n<p>复位状态</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:1\">\n<td>\n<p>PC</p>\n</td>\n<td>\n<p>0000H</p>\n</td>\n<td>\n<p>TCON</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>IP</p>\n</td>\n<td>\n<p>xxx00000</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:2\">\n<td>\n<p>ACC</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>TMOD</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>IE</p>\n</td>\n<td>\n<p>0xx00000</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:3\">\n<td>\n<p>B</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>TH0</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>SBUF</p>\n</td>\n<td>\n<p>xxxxxxxx</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:4\">\n<td>\n<p>SP</p>\n</td>\n<td>\n<p>07H</p>\n</td>\n<td>\n<p>TH1</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>SCON</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:5\">\n<td>\n<p>PSW</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>TL0</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>PCON</p>\n</td>\n<td>\n<p>0xxx0000</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:6;mso-yfti-lastrow:yes\">\n<td>\n<p>DPTR</p>\n</td>\n<td>\n<p>0000H</p>\n</td>\n<td>\n<p>TL1</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n<td>\n<p>P0~P3</p>\n</td>\n<td>\n<p>FFH</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（7）并行接口</font></h2>\n<p>P0口是一个三态双向I/O口，它有两种不同的功能，用于不同的工作环境。在不需要进行外部ROM、RAM等扩展时，作为通用的I/O口使用。在需要进行外部ROM、RAM等扩展时，采用分时复用的方式，通过地址锁存器后作为地址总线的低8位和8位数据总线。<a name=\"_Hlk533241959\">P0</a>口的输出级具有驱动8个LSTTL负载的能力。P0口在用作通用输出口时必须外接上拉电阻。</p>\n<p>P1口是一个准双向口，只作通用的I/O口使用，其功能与P0口的第一功能相同。作输出口使用时，由于其内部有上拉电阻，所以不需外接上拉电阻；作输入口使用时，必须先向锁存器写入“1”，使场效应管T截止，然后才能读取数据。P1口能带3～4个TTL负载。</p>\n<p>P2口是一个准双向口，它有两种使用功能：一种是在不需要进行外部ROM、RAM等扩展时，作通用的I/O口使用，其功能和原理与P0口第一功能相同，<a name=\"_Hlk533242325\">只是作为输出口时不需外接上拉电阻</a>；另一种是当系统进行外部ROM、RAM等扩展时，P2口作系统扩展的地址总线口使用，输出高8位的地址A15～A7，与P0口第二功能输出的低8位地址相配合，共同访问外部程序或数据存储器(64KB)，但它只确定地址，并不能像P0口那样还可以传送存储器的读写数据。<a name=\"_Hlk533242284\">P2</a>口具有驱动3～4个LSTTL负载的能力。</p>\n<p>P3口是一个多功能的准双向口。第一功能是作通用的I/O口使用，其功能和原理与P1口相同。第二功能是作控制和特殊功能口使用，这时8条端口线所定义的功能各不相同。P3口能带3～4个TTL负载。P3口相应的端口线处于第二功能，应满足的条件是：</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;串行I/O口处于运行状态(RXD，TXD)。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;外部中断已经打开(INT0、INT1)。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;定时/计数器处于外部计数状态(T0、T1)。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;执行读/写外部RAM的指令(RD、WR)。</p>\n<p>在应用中，若不设定P3口各位的第二功能，则P3口线自动处于第一功能状态。</p>\n<p><a name=\"_Hlk533274542\">P0</a>、P1、P2和P3口的各条口线用作通用输出时输出的数据位直接送至输出锁存器；用作通用输入时，也必须确保输出锁存器的锁存值为1，才能使对应的引脚处于悬浮状态，以正确读取引脚上的外部输入。对于如CPL\nPn.x或ANL Pn，#（n~3，x=0~7）等的“读—修改—写”类位操作或字节操作指令，其特点是先从端口读取数据，再修改读取的数据并将结果写回端口，在这类指令执行时，从端口读取数据实际是“读输出锁存器”而不是“读引脚”，以避免在因引脚外部电路的原因而使引脚的状态发生改变时可能造成的误读。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（8）定时/计数器</font></h2>\n<p>定时/计数器T0由特殊功能寄存器TH0、TL0(字节地址分别为8CH和8AH)构成，定时/计数器T1由特殊功能寄存器TH1、TL1(字节地址分别为8DH和8BH)构成。其内部还有一个8位的定时器方式寄存器TMOD和一个8位的定时器控制寄存器TCON。这些寄存器之间是通过内部总线和控制逻辑电路连接起来的。TMOD主要是用于选定定时器的工作方式，TCON主要是用于控制定时器的启动和停止。当定时器工作在计数方式时，外部事件是通过引脚T0(P3.4)和T1(P3.5)输入的。</p>\n<p>定时/计数器对内部的机器周期个数的计数就实现了定时，对片外脉冲个数的计数就是计数功能。在作定时器使用时，输入的时钟脉冲是由晶体振荡器的输出经12分频后得到的，所以定时器也可看作是对单片机机器周期的个数的计数器，当晶体振荡器连接确定后，机器周期的时间也就确定了，这样就实现了定时功能。<a name=\"_Hlk533275288\">在作计数器使用时，接相应的外部输入引脚</a>T0(P3.4)或T1(P3.5)。在这种情况下，当检测到输入引脚上的高电平由高跳变到低时，计数器就加1。每个机器周期的S5P2时采样外部输入，当采样值在第一个机器周期为高，在第二个机器周期为低时，则在下一个机器周期的S3P1期间计数器加1。由于确认一次负跳变要花两个机器周期，即24个振荡周期，因此外部输入的计数脉冲的最高频率为系统振荡频率的1/24，这就要求输入信号的电平应在跳变后至少一个机器周期内保持不变，以保证在给定的电平再次变化前至少被采样一次。</p>\n<p><a name=\"_Hlk533244006\">TF0</a>、TF1分别为定时器T0、T1的计数溢出标志位。当计数器计数溢出时，该位置1。在使用查询方式时，此位作为状态位供CPU查询，查询后由软件清0；使用中断方式时，此位作为中断请求标志位，中断响应后由硬件自动清0。</p>\n<p>TMOD寄存器中的GATE位用来决定定时器的运行启动形式。(GATE)＝0时，用软件使运行控制位TR0或TR1置1来启动定时/计数器T0或T1运行；(GATE)＝1时，由TR0或TR1置1同外部中断引脚(-INT1或-INT0)上的高电平共同决定启动定时/计数器T0或T1运行。</p>\n<p>定时/计数器T0或T1选定为方式1工作时由特殊功能寄存器TL0和TH0或TL1和TH1组成一个16位的定时/计数器，其最大的计数次数应为2<sup>16</sup>次。对应单片机采用6MHz晶振时，作为定时器使用的最大定时时间为2<sup>17</sup>μs。</p>\n<p><a name=\"_Hlk533275111\">定时/</a>计数器T0或T1在工作方式2是自动重装初值的8位定时/计数器。方式0和方式1当计数溢出时，计数器变为全0，因此再循环定时的时候，需要反复重新用软件给TH和TL寄存器赋初值，这样会影响定时精度，方式2就是针对此问题而设置的。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（9）串行接口</font></h2>\n<p><a name=\"_Hlk533315551\">串行通信中，数据是在两个站之间传送的。根据传送方向的不同，分为单工、半双工和全双工3</a>种。单工方式中只允许在一个方向传输数据。半双工方式中中的通信双方可以进行双向传输，但任何时候只能是一方发送，另一方接收，不能双方同时发送。全双工方式中有两条传输线，可以同时进行双向传输。</p>\n<p><a name=\"_Hlk533279504\">51</a>单片机的串行口有方式0、方式1、方式2和方式3等四种工作方式。方式0为同步移位寄存器输入/输出工作方式。串行传送数据8位为一帧(没有起始、停止、奇偶校验位)，8位串行数据的输入或输出都是通过RXD端，而TXD端用于输出同步移位脉冲。波特率固定为单片机振荡频率(fosc)的1/12。在方式1下，串行口设定为10位异步通信接口。字符帧由一个起始位“0”、8个数据位和一个停止位“1”组成。其波特率是可变的，由定时器T1的计数溢出率决定。方式2和方式3下，串行口工作在11位异步通信方式。一帧信息包含一个起始位“0”、8个数据位、一个可编程第9个数据位和一个停止位“1”。方式2和方式3两者的差异仅在于通信波特率有所不同：方式2的波特率是固定的，由主频fosc经32或64分频后提供；而方式3的波特率是可变的，由定时器T1的计数溢出率决定。</p>\n<h2 style=\"margin: 0px; line-height: normal;\"><font face=\"等线 Light\">（10）中断系统</font></h2>\n<p>8051单片机的中断系统有5个中断源，其中断服务程序的入口地址是固定的。8051单片机有两个中断优先级（高优先级和低优先级），可实现2级中断服务程序嵌套。对于每一个中断请求源可编程为高优先级中断或低优先级中断。一个正在执行的低优先级中断程序能被高优先级的中断源所中断，但不能被另一个低优先级的中断源所中断。若CPU正在执行高优先级的中断，则不能被任何中断源所中断，一直执行到结束，遇到返回指令RETI，返回主程序后再执行一条指令后才能响应新的中断请求。以上所述可以归纳为下面两条基本规则：</p>\n<p>\n<a name=\"_Hlk533280511\"><font face=\"Wingdings\">u</font>&nbsp;低优先级可被高优先级中断，而高优先级中断源不</a>能被任何中断源所中断。</p>\n<p><font face=\"Wingdings\">u</font>&nbsp;任何一种中断(不管是高级还是低级)，一旦得到响应，不会再被它的同级中断所中断。</p>\n<p>当几个同优先级的中断同时申请中断时，响应哪一个中断源将取决于内部查询顺序，或称为辅助优先级。辅助优先级按照相应中断请求对应的中断服务程序入口地址由小到大排列，地址越小，辅助优先级越高，地址越大，辅助优先级越低。</p>\n<div align=\"center\">\n<table style=\"margin: 0px; border: medium; border-image: none; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr style=\"mso-yfti-irow:0;mso-yfti-firstrow:yes\">\n<td>\n<p>中断源</p>\n</td>\n<td>\n<p>入口地址</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:1\">\n<td>\n<p>外部中断0\n(INT0)</p>\n</td>\n<td>\n<p>0003H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:2\">\n<td>\n<p>定时/计数器T0</p>\n</td>\n<td>\n<p>000BH</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:3\">\n<td>\n<p>外部中断1\n(INT1)</p>\n</td>\n<td>\n<p>0013H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:4\">\n<td>\n<p>定时/计数器T1</p>\n</td>\n<td>\n<p>001BH</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow:5;mso-yfti-lastrow:yes\">\n<td>\n<p>串行口S</p>\n</td>\n<td>\n<p>0023H</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>&nbsp;</p>"},{"title":"微机与控制复习要点A","date":"2015-12-24 22:00:00","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102w3pe.html","content":"<div style=\"TexT-ALiGn: center\"><font style=\"FonT-siZe: 24px\"><b><u>复习要点</u></b></font></div>\n<div>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>8086/8088</b><b>引脚</b>：-WR、-RD、INTR、INTA、ALE、RESET、M/-IO(IO/-M)、NMI</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数学运算与状态标志</b>：CF、ZF、SF、OF</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>堆栈</b>：SS、SP、BP</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>中断与中断向量</b>：IF</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>操作数与寻址方式</b>：数据与地址操作数、存储器寻址</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>汇编指令、汇编语言</b>：MOV、CMP/ADD/SUB、INC/DEC、XOR/AND/OR、SHL/SHR、ROL/ROR、RCL/RCR、JZ/JNZ、JC/JNC、IN/OUT、JMP、CALL、RET、PUSH/POP</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>高级语言</b>：<font color=\"#2251E3\">嵌入汇编语句、inp()/outp()函数与IN/OUT汇编指令的对应</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>8255</b><b>、8253</b>：初始化、控制应用</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>人机接口：</b><font color=\"#2251E3\">按键输入、LED输出</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>采样与量化：</b><font color=\"#2251E3\">采样定理、采样保持、量化单位、量化误差</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>输入调理与输出驱动：</b><font color=\"#2251E3\">滤波、保护、变换</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>A/D</b><b>、D/A</b>：ADC0808、DAC0808</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>干扰与抗干扰：</b></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>PID</b><b>控制</b>：<font color=\"#2251E3\">PID参数、控制算法</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>纯滞后控制</b>：大林、施密特预估</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数字滤波</b>：算术平均值、中位值、限幅、惯性</p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数字控制器</b>：<font color=\"#2251E3\">Z变换、Z反变换、差分变换、算法实现</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>步进电机：</b><font color=\"#2251E3\">工作方式、步距角、齿距角</font></p>\n<p>&Oslash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>梯形图与语句表</b>：LD、OUT、AND、OR、ANI、ORI、ANB、ORB、END</p>\n</div>\n<div>\n<div v:shape=\"_x0000_s1026\"></div>\n</div>"},{"title":"","date":"","cate":"","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102w3og.html","content":"很抱歉,该文章已经被加密!"},{"title":"微机与控制：结课考试题样B","date":"2015-12-24 15:00:00","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0102w3l0.html","content":"<h4 style=\"TexT-ALiGn: center; MArGin: 0cm 0cm 0pt\"><font style=\"FonT-siZe: 24px\"><u>考试题样</u></font></h4>\n<h4 style=\"Line-HeiGHT: normal; MArGin: 0cm 0cm 0pt; LAYoUT-GriD-MoDe: char\">一、填空题（50%～60%）</h4>\n<p>（1）Intel\n8255A 的A口有(<u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u>\n)种工作方式。</p>\n<p>（2）若一个数据块在内存中的起始地址为80A0H：7FF6H，则这个数据块的起始地址的物理地址为(______)。</p>\n<p>（3）设堆栈指针(SP)=2200H，此时若将AX、BX、CX依次推入堆栈后，(SP)=\n(______) 。</p>\n<p>（4）在80x86微处理器中，指令分配给寄存器SP的默认段寄存器是(______)。</p>\n<p>（5）INT\n40H 指令对应的中断向量存放在0000H<font face=\"宋体\">:</font>(______)H开始的内存单元。</p>\n<p>（6）PLC重复进行输入采样、程序执行和输出刷新三个阶段，每重复一次的时间称为一个(______)。</p>\n<h4 style=\"Line-HeiGHT: normal; MArGin: 0cm 0cm 0pt; LAYoUT-GriD-MoDe: char\">二、简答题（20%～30%）</h4>\n<p>（1）微处理器、微型计算机和微型计算机系统三者之间有何不同？</p>\n<p>（2）有一四相八极反应式步进电机，其技术数据中有步距角为3.6°/1.8°，则该电机转子齿数为多少？</p>\n<p>（3）说明如下正确指令完成的功能以及错误指令的错误原因</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH [1234]</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN AH, 12H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD AX, [BX]</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHL AX, 1</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMP AL</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV DI , DH&nbsp;</p>\n<h4 style=\"Line-HeiGHT: normal; MArGin: 0cm 0cm 0pt; LAYoUT-GriD-MoDe: char\">三、应用题（20%）</h4>\n<p>（1）用语言描述算术平均值法：int\nMiddle(int * intp, unsigned char N)；其中intp为连续存放采样值首地址，N为采样值个数，返回值为求得的平均值。</p>\n<p>（2）已知误差采样序列e*(t)的Z变换式为E(z)=(z<sup style=\"TexT-inDenT: 27pt\">2</sup>z)/(z<sup style=\"TexT-inDenT: 27pt\">3</sup>-3z<sup style=\"TexT-inDenT: 27pt\">2</sup>+3z+1)，试求该采样序列在第0、第1和第2个采样时刻的采样值。</p>\n<p>（3）设有根据E(k)求U(k)的PID算法实现程序如下，已知Kp=50，Ki=10，Kd=5且初始Ek_1=0及dEk_1=0，试求main函数执行后变量u0、u1、u2和u3的值。</p>\n<p>int\npid(int Ek)</p>\n<p>{\nstatic int Ek_1=0;</p>\n<p>&nbsp; static int dEk_1=0;</p>\n<p>&nbsp; int dEk,ddEk;</p>\n<p>&nbsp; int dU,P,I,D;</p>\n<p>&nbsp; dEk=Ek-Ek_1;\n&nbsp;ddEk=dEk-dEk_1;\n&nbsp;Ek_1=Ek;&nbsp; dEk_1=dEk;</p>\n<p>&nbsp; P=Kp*dEk;&nbsp;I=Ki*Ek;&nbsp; D=Kd*ddEk;</p>\n<p>&nbsp; dU=(P I D)/10;</p>\n<p>&nbsp; return(dU);</p>\n<p>}</p>\n<p>int\nu0,u1,u2,u3;</p>\n<p>int\nmain(void)</p>\n<p>{</p>\n<p>&nbsp; u0=0;&nbsp; u1=u0\npid(5);&nbsp; u2=u1 pid(-3);&nbsp; u3=u2\npid(1);</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>"},{"title":"微机与控制复习要点B","date":"2014-04-15 22:04:53","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0101dqzb.html","content":"<p><font style=\"FonT-siZe: 20px\"><strong><u>复习要点B</u></strong></font></p>\n<p><font color=\"#ED1C24\" style=\"FonT-siZe: 18px\"><strong>[1]8086/8088微处理器</strong></font></p>\n<p>\n（1）8086是Intel系列的16位微处理器。8086有16条数据总线，可以处理8位或16位数据。有20条地址总线，可以直接寻址1M（220）字节的存储单元和64K个I/O端口。8088微处理器的指令系统与8086完全兼容，CPU内部结构仍为16位，但外部数据总线是8位的，主要目的是为了与原有的8位外围接口芯片兼容。</p>\n<p>\n（2）从功能上分，8086/8088分为两部分：&#9312;总线接口部件（BIU），负责完成CPU与存储器或I/O设备之间的数据传送；&#9313;执行部件（EU），负责执行指令。指令队列出现空字节(8088CPU\n1个空字节，8086CPU\n2个空字节)时，BIU利用总线空闲提前从内存取出后续指令。BIU取指令时，并不影响EU的执行，两者并行工作，可大大提高CPU的执行速度。</p>\n<p>（3）8086/8088段寄存器与提供段内偏移地址的寄存器之间的默认组合</p>\n<p>（4）20位地址加法器，物理地址与逻辑地址</p>\n<p>（5）标志寄存器，各状态标志位的含义</p>\n<p>（6）8088CPU与8086CPU的异同</p>\n<p>（7）8086CPU引脚按功能可分为三大类：电源线和地线，地址/数据引脚以及控制引脚。</p>\n<p>（8）重点控制引脚：NMI、INTR、-INTA、RESET、-RD、-WR、-M/IO（M/-IO）、ALE</p>\n<p>（9）复位后相关寄存器的初值</p>\n<p>（10）中断、中断类型码、中断向量、中断向量表</p>\n<p><font color=\"#ED1C24\" style=\"FonT-siZe: 18px\"><strong>[2]存储器、接口与I/O通道</strong></font></p>\n<p>\n（1）存储器的分类：按存取速度和用途可把存储器分为内存储器和外存储器两大类；半导体存储器的分类：从应用角度可将半导体存储器分为随机读写存储器RAM和只读存储器ROM两大类；根据制造工艺的不同，随机读写存储器RAM主要有双极型和MOS型两类；只读存储器ROM有掩膜式ROM、可编程ROM\n(PROM)、可擦除的PROM (EPROM)、电擦除的PROM(EEPROM）。</p>\n<p>（2）存储芯片的扩展包括位扩展、字扩展和字位同时扩展等三种情况。</p>\n<p>（3）8255：引脚及连接，端口及地址、方式字与初始化指令序列、C口位操作、方式0简单应用、开关量输入开关量输出、其它I/O连接应用、其它基本认识。</p>\n<p>\n（4）8253：引脚及连接，端口及地址、方式字与初始化指令序列、计数初值计算、方式2、3简单应用、周期脉冲输出、定时与查询、其它基本认识</p>\n<p>（5）8251：结合串行通信基础（6）8259：结合可屏蔽中断响应过程</p>\n<p>（7）接口与过程通道的概念（8）I/O设备的状态：空闲态、忙状态、完成态。（9）CPU与I/O设备的同步方法：盲周期法、忙等待法、中断法、周期轮询法、DMA法等。</p>\n<p>\n（10）信号的采样和量化：采样过程、采样定理、量化与量化单位、多路转换开关、采样保持、孔径时间、A/D转换实现方法（计数比较法、双斜率积分法、逐次逼近法）。如果被采样的模拟信号的变化频率相对于A/D转换器的速度来说比较高，为保证转换精度，需要在A/D转换之前加上采样保持电路，使得在A/D转换期间保持输入模拟信号不变。</p>\n<p>（11）I/V变换、典型ADC/DAC芯片（ADC0809、DAC0832）</p>\n<p>（12）数字滤波：算术平均值法、中位值滤波法（13）步进电机：工作方式、工作拍数、齿距角、步距角</p>\n<p><font color=\"#ED1C24\" style=\"FonT-siZe: 18px\"><strong>[3]\n数字控制</strong></font></p>\n<p>（1）差分变换（2）PID控制器：PID各控制分量的作用、PID控制器的选择应用、数字PID位置式控制算法、数字PID增量式控制算法、积分分离、积分饱和、不完全微分、微分先行、数字PID控制器参数整定</p>\n<p>（3）Z变换、Z反变换（4）施密特预估控制、大林算法（5）数字控制器设计：直接程序、串行程序、并行程序</p>\n<p><strong><font color=\"#ED1C24\" style=\"FonT-siZe: 18px\">[4]\n汇编语言程序设计</font></strong></p>\n<p>（1）DB、DW伪指令与存储分配（2）主要指令功能、对标志寄存器、堆栈的影响：MOV、LEA/LDS/LES、PUSH/POP、XCHG、ADD/ADC、SUB/SBC、INC/DEC、ROL/ROR、SHL/SHR、SAL/SAR、AND、OR、XOR、NEG、NOT、JMP、Jxx、LOOP、JCXZ、CALL/RET、IRET\n（3）简单程序阅读、简单程序编写</p>"},{"title":"51单片机练习题(“编程与应用”解答)","date":"2013-11-02 16:33:02","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0101b0c7.html","content":"<div><font style=\"font-size: 18px;\"><b>4、编程与应用</b></font></div>\n<div>4.1、编程实现c=a*a+b*b。设a、b均小于10，a存在31H单元，b存在32H单元，把c存入33H单元。</div>\n<div>\n<div><font color=\"#1E05FA\">答： MOV A,31H &nbsp;&nbsp; &nbsp;；以下求a的平方值</font>在A中</div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MOV B,31H</font></div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MUL AB</font></div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MOV 33H,A&nbsp;</font>&nbsp; &nbsp;&nbsp;<font color=\"#1E05FA\">；</font>暂时将a的平方值保存在33H单元</div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MOV A,32H&nbsp;</font>&nbsp; &nbsp;&nbsp;；以下求b的平方值在A中</div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MOV B,32H</font></div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MUL AB</font></div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;ADD A,33H</font>&nbsp; &nbsp;&nbsp;<font color=\"#1E05FA\">&nbsp;；累加</font>b的平方值与暂存在33H单元中的a的平方值</div>\n<div><font color=\"#1E05FA\">&nbsp; &nbsp;&nbsp;MOV 33H,A&nbsp;</font>&nbsp; &nbsp;&nbsp;；将最后累加结果存入33H单元</div>\n</div>\n<div>4.2、将两个半字节数，合并成一字节数。将片内RAM\n50H、51H地址中的内容各自低4位合并后，结果存入片内RAM&nbsp;52H地址中。</div>\n<div><font color=\"#0906FE\">答：</font> MOV\nA,51H&nbsp;&nbsp; &nbsp;&nbsp;；取51H单元的值到累加器A</div>\n<div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;ANL A,#0FH</font>&nbsp;&nbsp; ；只保留低4位的值（高4位清零）</div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;SWAP\nA&nbsp;</font>&nbsp;&nbsp; &nbsp;；将保留的低4位的值交换到高4位，源高4位的0000交换到低4位</div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;MOV 52H,A</font>&nbsp;&nbsp;&nbsp;；暂存到52H单元</div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;MOV\nA,50H&nbsp;</font>&nbsp;&nbsp;；取50H单元的值到累加器A</div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;ANL A,#0FH</font><font color=\"#1E05FA\">&nbsp;&nbsp;</font>&nbsp;；只保留低4位的值（高4位清零）</div>\n<div><font color=\"#0906FE\">&nbsp; &nbsp;&nbsp;ORL 52H,A</font>&nbsp;&nbsp;&nbsp;；将A的低4位合并到52H单元保存值的低4位</div>\n</div>\n<div>\n<div>4.3、设有D1、K1连接如附图。</div>\n<div>&#9312;试编程实现如下控制：D1初始点亮，此后开关每按下一次，D1改变状态一次。</div>\n<div>\n&#9313;试编程实现如下控制：D1初始点亮，此后开关闭合时，每隔250毫秒D1改变状态一次，开关打开时D1维持最后状态不改变(设晶振频率=3MHz)。</div>\n</div>\n<div><font color=\"#0F03FE\">&#9312;答： CLR P1.0</font>&nbsp; &nbsp;&nbsp;；初始点亮D1</div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; SETB P1.7&nbsp;&nbsp;&nbsp;；确保P1.7端口可以输入开关状态</div>\n<div><font color=\"#0F03FE\">&nbsp; L0: JNB P1.7,$\n&nbsp; &nbsp;；等待开关释放</font></div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; JB P1.7,$ &nbsp;&nbsp; ；等待开关闭合</div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; CPL P1.0&nbsp;&nbsp; &nbsp;；翻转D1状态</div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; SJMP L0&nbsp;&nbsp; &nbsp; ；循环检测与控制</div>\n<div><font color=\"#0F03FE\">&#9313;答： CLR A&nbsp;&nbsp; &nbsp;&nbsp;；用累加器累计定时器溢出次数</font></div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; MOV TMOD,#02H&nbsp;；定时器0方式2</div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; <font color=\"#0F03FE\">MOV TH0,#(256-250) ；基本定时周期1ms=250*4us（</font>基本计时脉冲周期=4us@3MHz）</div>\n<div><font color=\"#0F03FE\">&nbsp;&nbsp;</font>&nbsp; MOV TL0,TH0&nbsp;&nbsp;；首次计数初值装入TL0，重装入计数初值装入TH0</div>\n<div><font color=\"#1E05FA\">&nbsp;&nbsp;&nbsp;</font><font color=\"#0F03FE\">CLR TF0&nbsp; &nbsp;&nbsp; ；清定时器0溢出标志</font></div>\n<div>&nbsp;&nbsp;&nbsp;SETB TR0&nbsp;&nbsp; &nbsp;；启动定时器0运行</div>\n<div><font color=\"#0F03FE\">&nbsp; L0: JBC\nTF0,L1&nbsp; &nbsp;；定时器0溢出则清TF0并转去累计溢出次数及进一步处理</font></div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;JMP\nL0&nbsp; &nbsp;&nbsp;&nbsp;；累计定时器0溢出次数</div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;<font color=\"#0F03FE\">CJNE\nA,#250,L0&nbsp; ；溢出次数未达250次说明250ms</font>未到则继续累计</div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;CLR\nA&nbsp; &nbsp; &nbsp;&nbsp;；250ms已到则清零累加器准备进行下一个250ms的累计</div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;<font color=\"#0F03FE\">JB\nP1.7，L0&nbsp; &nbsp;；</font>250ms已到但开关未闭合则不执行动作</div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;<font color=\"#0F03FE\">CPL\nP1.0&nbsp; &nbsp;&nbsp;；</font>250ms已到且开关闭合则翻转D1状态</div>\n<div><font color=\"#0F03FE\">&nbsp;</font>&nbsp;&nbsp;<font color=\"#0F03FE\">JMP\nL0&nbsp; &nbsp; &nbsp;；</font>循环检测与控制</div>"},{"title":"51单片机练习题","date":"2013-10-17 13:54:11","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0101apw9.html","content":"<p><strong><font color=\"#ED1C24\" size=\"5\">以下资料转摘自网络并经适当整理，请参照使用。</font></strong></p>\n<p><font style=\"FonT-siZe: 18px\"><strong>1、填空题</strong></font></p>\n<p>1.1、MCS-51系统中，当PSEN信号有效时，表示CPU要从（<u><font color=\"#ED1C24\">外部程序存储器</font></u>）存储器读取信息。</p>\n<p>1.2、PSW中的RS1RS0=10时，R2的地址为（<font color=\"#ED1C24\"><u>12H</u></font>），RS1RS0=11时，R2的地址为（<u><font color=\"#ED1C24\">1AH</font></u>）。</p>\n<p>1.3、一个机器周期=12个（<font color=\"#ED1C24\"><u>振荡周期</u></font>）=6个（<font color=\"#ED1C24\"><u>状态周期/时钟周期</u></font>）。</p>\n<p>1.4、在MCS－51单片机中，如果采用8MHz晶振，1个机器周期为（<font color=\"#ED1C24\"><u>1.5</u></font>）us。</p>\n<p>1.5、若（DPTR）=2000H，（A）=50H，执行指令“MOVC\nA，@A+DPTR”后，送入A的是程序存储器（<font color=\"#ED1C24\"><u>2050H</u></font>）单元的内容。</p>\n<p>1.6、假定累加器（A）=50H，执行程序存储器2000H单元处的指令“MOVC\nA，@A+PC”后，送入A的是程序存储器（<font color=\"#ED1C24\"><u>2051H</u></font>）单元的内容。</p>\n<p>1.7、访问内部RAM可使用MOV指令，而访问外部RAM使用（<font color=\"#ED1C24\"><u>MOVX</u></font>）指令，访问内部ROM使用（<font color=\"#ED1C24\"><u>MOVC</u></font>）指令，访问外部ROM使用（<font color=\"#ED1C24\"><u>MOVC</u></font>）指令。</p>\n<p>1.8、指令“ORL A，#0F0H”的作用是将A的高4位置1，而低4位（<font color=\"#ED1C24\"><u>保持不变</u></font>）。</p>\n<p>1.9、执行“ANL A，#0FH”指令后，累加器A的高4位= （<font color=\"#ED1C24\"><u>0000B</u></font>）。</p>\n<p>1.10、若“SJMP rel”的指令操作码地址为1000H，rel=50H，那么它的转移目标地址为（<font color=\"#ED1C24\"><u>1052H</u></font>）。</p>\n<p>1.11、假定（A）=54，执行指令“ADD A，#65”后，累加器A的内容为（<font color=\"#ED1C24\"><u>01110111B</u></font>），CY的内容为（<font color=\"#ED1C24\"><u>0</u></font>）。</p>\n<p>1.12、主频为12MHz的MCS-51单片机系统用T0方式1定时1ms，则时间常数应为 (<font color=\"#ED1C24\"><u>64536</u></font>)。</p>\n<p>1.13、假定（A）=86H，执行指令“ADD&nbsp;A，#8DH”后，累加器A的内容为(<font color=\"#ED1C24\"><u>03H</u></font>)，CY的内容为(<font color=\"#ED1C24\"><u>1</u></font>)，AC的内容为(<font color=\"#ED1C24\"><u>1</u></font>)，OV的内容为(<font color=\"#ED1C24\"><u>1</u></font>)。</p>\n<p>&nbsp;</p>\n<p><strong><font style=\"FonT-siZe: 18px\">2、选择题</font></strong></p>\n<p>2.1、当MCS-51复位时，下面说法正确的是（<font color=\"#ED1C24\"><u>A</u></font>）。&nbsp; A、 PC=0000H；&nbsp; B、\nSP=00H；&nbsp; C、 SBUF=00H；&nbsp; D、\nP0=00H；2.2、PSW=01H时，则当前工作寄存器是（<u><font color=\"#ED1C24\">B</font></u>）。&nbsp; A、\n0组；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B、\n1组；&nbsp;&nbsp;&nbsp;&nbsp;C、\n2组；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D、 3组；</p>\n<p>2.3、单片机8031的ALE引脚是（<u><font color=\"#ED1C24\">C</font></u>）\n。&nbsp;A、输出高电平；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C、输出矩形脉冲，频率为fosc的1/6；&nbsp;B、输出低电平；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D、输出矩形脉冲，频率为fosc的1/2；</p>\n<p>2.4、若PSW.4=0，PSW.3=1，要想把寄存器R0的内容入栈，应使用(<font color=\"#ED1C24\"><u>D</u></font>)指令。&nbsp;&nbsp;A、PUSH\nR0；&nbsp;&nbsp;&nbsp;&nbsp;B、PUSH\n@R0；&nbsp;C.PUSH\n00H；&nbsp;&nbsp;&nbsp; D.PUSH\n08H；</p>\n<p>&nbsp;</p>\n<p><strong><font style=\"FonT-siZe: 18px\">3、简答题</font></strong></p>\n<p>3.1、简述读片外ROM和读写片外RAM用到的控制信号。</p>\n<p><font color=\"#ED1C24\">答：ALE：当CPU\n访问外部程序或数据存储器时，此信号作为锁存低8位地址的控制信号。</font></p>\n<p><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;PSEN：外部程序存储器选通控制信号，低电平有效。&nbsp;&nbsp;&nbsp;EA：该引脚为低电平时，只选用片外程序存储器；该引脚为高电平时，先选用片内程序存储器，然后选用片外程序存储器。&nbsp;&nbsp;&nbsp;RD：片外RAM读控制信号。&nbsp;&nbsp;&nbsp;WR：片外RAM写控制信号。</font></p>\n<p>3.2、简述89C51串口通信的四种方式及其特点。<font color=\"#ED1C24\">答：</font><font color=\"#ED1C24\">方式0：同步移位寄存器输入/输出方式，常用于扩展I/O口。波特率固定为振荡频率的1/12，并不受PCON寄存器中SMOD位的影响。\n&nbsp;&nbsp;&nbsp;方式1：用于串行发送或接收，为10位通用异步接口。TXD与RXD分别用于发送与接收数据。收发一帧数据的格式为1位起始位、8位数据位（低位在前）、1位停止位，共10位。波特率由定时器T1的溢出率与SMOD值同时决定。\n&nbsp;&nbsp;&nbsp;方式2：用于串行发送或接收，为11位通用异步接口。TXD与RXD分别用于发送与接收数据。收发一帧数据的格式为1位起始位、8位数据位（低位在前）、1位可编程的第9数据位和1位停止位，共11位。波特率取决于PCON中SMOD位的值：当SMOD＝0时，波特率为\n的1/64；当SMOD＝1时，波特率为 的1/32。&nbsp;&nbsp;&nbsp;方式3：用于串行发送或接收，为11位通用异步接口。TXD与RXD分别用于发送与接收数据。帧格式与方式2相同，波特率与方式1相同。</font></p>\n<p>&nbsp;</p>\n<p><strong><font style=\"FonT-siZe: 18px\">4、编程与应用</font></strong></p>\n<p>4.1、编程实现c=a*a+b*b。设a、b均小于10，a存在31H单元，b存在32H单元，把c存入33H单元。</p>\n<p>4.2、将两个半字节数，合并成一字节数。将片内RAM 50H、51H地址中的内容各自低4位合并后，结果存入片内RAM\n52H地址中。</p>\n<p>4.3、设有D1、K1连接如附图。</p>\n<p><img src=\"./imgs/553fab3btx6DuFE0Rsm12&690\" width=\"498\" name=\"image_operate_34381381994582390\" alt=\"51单片机练习题\" title=\"51单片机练习题\">试编程实现如下控制：D1初始点亮，此后开关每按下一次，D1改变状态一次。</p>\n<p>\n试编程实现如下控制：D1初始点亮，此后开关闭合时，每隔250毫秒D1改变状态一次，开关打开时D1维持最后状态不改变(设晶振频率=3MHz)。</p>\n<p>&nbsp;</p>"},{"title":"51单片机系统应用","date":"2012-10-23 13:53:13","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012tzz.html","content":"<p><font style=\"FonT-siZe: 14px\"><font style=\"FonT-siZe: 18px\"><font color=\"#0214FA\"><strong>应用1</strong></font></font>：</font>&nbsp;设有51应用系统连接如附图。试说明该系统分别执行如下程序段A和程序段B时，与P1.0端口连接的LED如何显示变化？对应程序段A和程序段B的显示变化有何区别？</p>\n<p><img src=\"./imgs/553fab3b4ccb4f4125fbf&690\" width=\"304\" height=\"300\" alt=\"51单片机系统应用\" title=\"51单片机系统应用\"></p>\n<p><font style=\"FonT-siZe: 14px\">程序段A：</font></p>\n<p><font style=\"FonT-siZe: 14px\">LP: CPL\nP1.0</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;MOV R0,#0</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;&nbsp;DJNZ R0,$</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;JMP LP</font></p>\n<p><font style=\"FonT-siZe: 14px\">程序段B：</font></p>\n<p><font style=\"FonT-siZe: 14px\">LP: SETB\nP1.0</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;&nbsp;DJNZ\nR0,$</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;&nbsp;CLR\nP1.0</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;&nbsp;DJNZ\nR0,$</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;&nbsp;DJNZ\nR0,$</font></p>\n<p><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;&nbsp;JMP LP</font></p>\n<p><font style=\"FonT-siZe: 14px\" color=\"#ED1C24\">答：对应程序段A和程序段B，LED都将周期性变换亮灭状态。每个亮灭变换周期内，对程序段A，LED持续亮的时间与持续灭的时间长度相同；对程序段B，LED持续亮的时间是持续灭的时间长度的2倍。程序段B时的LED亮灭周期约为程序段A时的LED亮灭周期的1.5倍。</font></p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 14px\"><font style=\"FonT-siZe: 18px\"><font color=\"#0214FA\"><strong>应用2</strong></font></font>：</font><font style=\"FonT-siZe: 14px\">设有51应用系统连接如应用1附图，且系统所用晶振频率为12MHz。试编写程序段应用51单片机的定时/计数器1实现连接在P1.0上的LED的显示状态每隔10秒钟翻转一次。</font></p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 14px\" color=\"#ED1C24\">答：</font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV TMOD,#20H&nbsp; &nbsp;；T1定时方式2：8位自动重装入</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV TH1,#(256-250)\n；定时周期250us（对应12MHz晶振，每个机器周期=1us）&nbsp;</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV TL1,TH1&nbsp; &nbsp;&nbsp;；</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;CLR TF1&nbsp; &nbsp; &nbsp;&nbsp; ；清T1溢出标志</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;SETB TR1&nbsp; &nbsp; &nbsp;&nbsp;；启动T1计时</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV R0,#0&nbsp; &nbsp; &nbsp;；R0用于累计T1溢出的次数</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV R1,#0&nbsp; &nbsp; &nbsp;；R1用于累计R0达到200的次数</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\" color=\"#ED1C24\">LP:&nbsp; JBC\nTF1,L1&nbsp; &nbsp; &nbsp;&nbsp;；如果TF1为1则清零TF1并转去进行溢出次数累计</font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;JMP LP&nbsp; &nbsp; &nbsp;&nbsp; ；循环等待T1溢出</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">L1:&nbsp; INC\nR0&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;；累计T1溢出次数</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;CJNE R0,#200,LP&nbsp;；未达到200次则转去等待下一次溢出</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\" color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV R0,#0&nbsp; &nbsp; &nbsp;；确保R0的值在0~199之间</font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;INC R1&nbsp; &nbsp; &nbsp;&nbsp;；累计时间达到50ms的次数（250us*200=50ms）</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;CJNE R1,#200,LP&nbsp;；累计时间未达到10s则转去等待下一次溢出</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;MOV R1,#0&nbsp; &nbsp; &nbsp;；确保R1的值在0~199之间</font></font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\" color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;CPL P1.0&nbsp; &nbsp; &nbsp;；累计时间已达到10s，则翻转P1.0状态1次（50ms*200=10s）</font></font></p>\n<p><font style=\"FonT-siZe: 20px\"><font style=\"FonT-siZe: 14px\"><font color=\"#ED1C24\">&nbsp;&nbsp;&nbsp;&nbsp;JMP LP&nbsp; &nbsp; &nbsp;&nbsp; ；继续循环累计时间</font></font></font></p>\n<p>&nbsp;</p>"},{"title":"51单片机在片设备与中断（4）","date":"2012-10-22 15:01:48","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012t74.html","content":"<p><font style=\"FonT-siZe: 18px\" color=\"#0102FF\"><strong><strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></strong></font></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0102FF\"><strong>填空</strong></font></p>\n<p>1、在串行通信中，有数据传送方向为( 单工 )、( 半双工&nbsp;)和(\n全双工&nbsp;)三种方式。</p>\n<p>2、要串口为10位UART，工作方式应选为( 方式1&nbsp;)。</p>\n<p>3、用串口扩并口时，串行接口工作方式应选为方式( 0&nbsp;)。</p>\n<p>4、计算机的数据传送有两种方式，即( 并行数据传送&nbsp;)和(\n串行数据传送&nbsp;)方式，其中具有远距离成本低特点的是(\n串行数据传送&nbsp;)方式。</p>\n<p>5、串行通信按同步方式可分为( 异步通信 )和( 同步通信 )。</p>\n<p>6、异步串行数据通信的帧格式由( 起始 )位、( 数据 )位、( 奇偶校验 )位和(\n停止&nbsp;)位组成。</p>\n<p>\n7、MCS-51有5个中断源，2个中断优先级，优先级由软件填写特殊功能寄存器(IP&nbsp;)加以选择。</p>\n<p>8、外中断请求标志位是( IE0&nbsp;)和(\nIE1&nbsp;)。</p>\n<p>9、( RETI&nbsp;)指令以及任何访问( IE&nbsp;)和(\nIP&nbsp;)寄存器的指令执行过后，CPU不能马上响应中断。</p>\n<p>10、8051单片机响应中断后，产生长调用指令LCALL，执行该指令的过程包括：首先把( PC\n)的内容压入堆栈，以进行断点保护，然后把长调用指令的16位地址送( PC&nbsp;)，使程序执行转向(\n程序存储器&nbsp;)中的中断地址区。</p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0102FF\"><strong>选择</strong></font></p>\n<p>1、串行通信的传送速率单位波特的含义是( B )</p>\n<p>A、 字符/秒</p>\n<p>B、 位/秒</p>\n<p>C、 帧/秒</p>\n<p>D、 帧/分</p>\n<p>2、帧格式为1个起始位、8个数据位和1个停止位的异步串行通信方式是( B )</p>\n<p>A、 方式0</p>\n<p>B、 方式1</p>\n<p>C、 方式2</p>\n<p>D、 方式3</p>\n<p>3、通过串行口发送或接收数据时，在程序中应使用( A )</p>\n<p>A、 MOV指令</p>\n<p>B、 MOVX指令</p>\n<p>C、 MOVC指令</p>\n<p>D、 SWAP指令</p>\n<p>4、在下列所列特点中，不属于串行工作方式2的是( C )</p>\n<p>A、 11位帧格式</p>\n<p>B、 有第9数据位&nbsp;</p>\n<p>C、 使用一种固定的波特率</p>\n<p>D、 使用两种固定的波特率</p>\n<p>5、在中断服务程序中，至少应有一条( D )。</p>\n<p>A、 传送指令</p>\n<p>B、 转移指令</p>\n<p>C、 加法指令</p>\n<p>D、 中断返回指令</p>\n<p>6、要使MCS-51能够响应定时器T1中断，串行接口中断，它的中断允许寄存器IE的内容应是( A ) 。</p>\n<p>A、 98H</p>\n<p>B、 84H</p>\n<p>C、 42H&nbsp;</p>\n<p>D、 22H</p>\n<p>7、当CPU响应串行接口中断时，程序应转到( C ) 。</p>\n<p>A、 0003H</p>\n<p>B、 0013H</p>\n<p>C、 0023H&nbsp;</p>\n<p>D、 0033H</p>\n<p>8、若MCS-51中断源都编程为同级，当它们同时申请中断时，CPU首先响应( B ) 。</p>\n<p>A、 INT1</p>\n<p>B、 INT0</p>\n<p>C、 T1</p>\n<p>D、 T0</p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0102FF\"><strong>判断</strong></font></p>\n<p>1、串行口方式1的波特率是可变的，通过定时器/计数器T1的溢出设定。</p>\n<p>2、<font color=\"#ED1C24\">要进行多机通信，MCS-51串行接口应工作在方式1。</font></p>\n<p>3、MCS-51的串行接口是全双工的。</p>\n<p>4、CPU响应串行口中断后，必须在中断服务程序中，用软件清除相应的中断标志位，以撤消中断请求。</p>\n<p>5、<font color=\"#ED1C24\">8051单片机对最高优先权的中断响应是无条件的。</font></p>\n<p>6、<font color=\"#ED1C24\">中断初始化时，对中断控制器的状态设置，只可使用位操作指令，而不能使用字节操作指令。</font></p>\n<p>7、MCS—51单片机系统复位后，TCON和SCON中的各位中断请求标志均为0。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"},{"title":"51单片机在片设备与中断（3）","date":"2012-10-22 13:24:17","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012t64.html","content":"<p><font style=\"FonT-siZe: 18px\" color=\"#0D00FF\"><strong>中断控制要点</strong></font></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">1、</font>当CPU正在处理某项事务的时候，如果外界或内部发生了更紧急的事件，要求CPU暂停正在处理的工作转而去处理这个紧急事件，待处理完以后再回到原来被中断的地方，继续执行原来被中断了的程序，这样的过程称为<b>中断</b>。</p>\n<p>&nbsp; （1）能够实现中断处理功能的部件称为<b>中断系统</b>。</p>\n<p>&nbsp;（2）向CPU提出中断请求的源称为<b>中断源</b>，51系列单片机共有5个中断源。</p>\n<p>&nbsp;（3）中断源向CPU提出的处理请求，称为<b>中断请求</b>或<b>中断申请</b>。</p>\n<p>&nbsp;（4）CPU同意处理中断请求称为<b>中断响应</b>，处理中断请求的程序称为<b>中断服务子程序</b>。</p>\n<p>&nbsp;（5）当CPU暂时终止正在执行的程序，转去执行中断服务子程序时，除了硬件自动把断点地址(16位程序计数器PC的值)压入堆栈之外，用户应注意保护有关的工作寄存器、累加器、标志位等信息，这称为<b>保护现场</b>；在完成中断服务子程序后，恢复有关的工作寄存器、累加器、标志位的内容，称为<b>恢复现场</b>；最后执行中断返回指令RETI，从堆栈中自动弹出断点地址到PC，继续执行被中断的程序，称为<b>中断返回</b>。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">2、</font>基本<font face=\"Times New Roman\">51</font>单片机的中断系统有<font face=\"Times New Roman\">5</font>个中断源，可任意分为<font face=\"Times New Roman\">2</font>个中断优先级（高优先级和低优先级），可实现<font face=\"Times New Roman\">2</font>级中断服务程序嵌套。</p>\n<p>&nbsp; （1）中断优先级寄存器IP的字节地址为B8H，可以位寻址。IP相应的位为0则其对应中断的优先级为低，否则优先级为高。51单片机复位以后IP为0，各个中断源均为低优先级中断。可用位操作指令或字节操作指令更改IP的内容，以改变各中断源的中断优先级。&nbsp;</p>\n<p>&nbsp;（2）中断允许寄存器IE的字节地址为A8H，可以位寻址。51单片机的CPU对中断源的开放或屏蔽，是由片内的中断允许寄存器IE控制的，51单片机复位以后，IE被清0，由用户程序置“1”或清“0”IE相应的位，实现允许或禁止相应中断源的中断申请。若允许某一个中断源中断，除了开放中断总的允许位EA外，必须同时使CPU开放该中断源的中断允许位。</p>\n<p>&nbsp;（3）51单片机有两个中断优先级，对于每一个中断请求源可编程为高优先级中断或低优先级中断。一个正在执行的低优先级中断程序能被高优先级的中断源所中断，但不能被另一个低优先级的中断源所中断。若CPU正在执行高优先级的中断，则不能被任何中断源所中断，一直执行到中断服务结束，遇到返回指令RETI。每次从中断服务程序返回主程序后都必须再执行一条指令后才能响应新的中断请求。中断嵌套的两条基本规则是：&#9312;低优先级可被高优先级中断，而高优先级中断源不能被任何中断源所中断；&#9313;任何一种中断(不管是高级还是低级)，一旦得到响应，不会再被它的同级中断所中断。</p>\n<p><strong>&nbsp;</strong> （4）当几个同优先级的中断同时申请中断时，响应哪一个中断源将取决于由辅助优先级决定的一个内部查询顺序，具体就是中断服务程序的入口地址越靠前（地址值越小）则辅助优先级越高。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">3、</font>如果总的中断允许开放（即EA=1）则CPU在每个机器周期的S5P2时刻采样中断标志，并在下一个机器周期对采样到的中断进行查询。如果前一个机器周期的S5P2有中断标志，则在查询周期内便会查询到，并按优先级高低进行中断处理，如果响应中断，中断系统将控制程序转入相应的中断服务子程序。CPU中断响应是有条件的，并不是查询到的所有中断请求都能被立即响应，当遇到下列三种情况之一时，中断响应被封锁：</p>\n<p>&nbsp; （1）CPU正在处理相同的或更高优先级的中断；</p>\n<p>&nbsp; （2）现行的机器周期不是所执行指令的最后一个机器周期；</p>\n<p>&nbsp;（3）正在执行的指令是RETI或是访问IE或IP的指令（CPU在执行RETI或访问IE、IP的指令后，至少需要再执行一条指令才会响应新的中断请求）。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">4、</font>TF0和TF1分别为定时/计数器0和定时/计数器1的中断请求标志位，在已经开放T0/T1中断允许且已被启动的前提下，T0/T1加1计满溢出时\nTF0/TF1标志位自动置“1”；CPU\n检测到TCON中TF0/TF1变“1”后,将自动保存当前PC值到堆栈，并将相应中断服务程序入口地址000BH/001BH赋值给PC，从而在下一条指令开始执行中断服务；<strong>TF0/TF1标志位由硬件自动清“0”</strong>,以便进行下次中断申请。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">5、</font>IE0和IE1分别为外部中断0和外部中断1中断申请标志位。以外部中断0为例，当IT0为0即选择电平触发方式时，每个机器周期的S5P2采样-INT0，若-INT0为低电平，则IE0置“\n1”，否则IE0清“0”；当IT0为1即选择边沿触发方式时，当前一个机器周期采样到-INT0输入为高，而本机器周期采样到该引脚为低电平时，则置“1”IE0；IE0/IE1为1表示外部中断0/1正在向CPU申请中断。当CPU响应中断，转向中断服务子程序（入口地址0003H/0013H）时，<b>由硬件自动清“0”IE0/IE1</b>。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">6、</font>TI和RI分别是串行口的发送中断和接收中断的中断请求标志。&nbsp;</p>\n<p>&nbsp;（1）在串行口以方式0发送时，每当发送完8位数据，由硬件置“1”TI；若以方式1、方式2或方式3发送时，在发送停止位的开始时置“1”TI。TI为1表示串行口发送器正在向CPU申请中断，而CPU响应串口发送器中断请求，转向执行中断服务程序时并不清“0”TI，<strong>TI必须由用户的中断服务子程序清0</strong>（即中断服务子程序中必须用CLR\nTI或ANL SCON，#0FDH等清“0”TI的指令）。</p>\n<p>&nbsp;（2）若串行口接收器允许接收，并以方式0工作，每当接收到第8位数据时置“1”RI；若以方式1、2、3工作，且(SM2)＝0时，每当接收器接收到停止位的中间时置“1”RI，当串行口以方式2或方式3进行工作，且(SM2)＝1时仅当接收到的第9位数据RB8为1后，同时还要在接收到停止位的中间位置“1”RI。RI为1表示串行口接收器正在向CPU申请中断，而CPU响应串口接收器中断请求，转向执行中断服务程序时并不清“0”RI，<strong>RI必须由用户的中断服务子程序清0</strong>（即中断服务子程序中必须用CLR\nRI或ANL SCON，#0FEH等清“0”RI的指令）。</p>\n<p>&nbsp;（3）实际上串口发送器中断请求和串口接收器中断请求对应着同一个中断服务程序入口地址0023H。在用户的串口中断服务子程序的开始应首先判断TI和RI标志以决定本次中断是由发送结束引起还是由接收完成引起以便进一步转入相应的处理（也可能恰好即是发送结束又是接收完成）。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"},{"title":"51单片机在片设备与中断（2）","date":"2012-10-22 11:42:42","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012t16.html","content":"<p><font style=\"FonT-siZe: 18px\" color=\"#1502FC\"><strong>串行通信要点</strong></font></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">1、</font>计算机与其外部设备、计算机与计算机之间的信息交换称为通信。通信的基本方式分为并行通信和串行通信两种。</p>\n<p>&nbsp;（1）并行通信是指数据的各位同时进行传送的通信方式。其优点是数据传送速度快，缺点是需要多条传输线。</p>\n<p>&nbsp;（2）串行通信是指数据的各位是一位一位地按顺序传送的通信方式。其突出优点是数据的传送只需要一对传输线，或利用电话线作为传输线，可极大地降低成本，特别适用于远距离通信。其缺点是数据传送速率较低。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">2、</font>串行通信可分为同步通信和异步通信两种方式。</p>\n<p>&nbsp;&nbsp;（1）异步通信方式中，接收器和发送器有各自的时钟，它们的工作是非同步的，异步通信用一帧来表示一个字符，其中包括一个起始位以及紧接着的若干个数据位，最后是可能的校验位和必需的停止位。</p>\n<p>&nbsp; （2）同步通信方式中，发送器和接收器由同一个时钟源控制，一帧同步信息包括最开始的<font face=\"Times New Roman\">1</font>～<font face=\"Times New Roman\">2</font>个同步字符，紧跟着由固定长度<font face=\"Times New Roman\">(</font>如<font face=\"Times New Roman\">100</font>个<font face=\"Times New Roman\">)</font>的字符组成的一个数据块，其中每个字符也由<font face=\"Times New Roman\">5</font>～<font face=\"Times New Roman\">8</font>位组成，最后是校验字符。同步信息帧中字符与字符之间不允许留空。</p>\n<p>&nbsp;（3）在异步通信中，每传输一帧字符都必须加上用于同步收发双方时钟是我起始位和停止位，占用了传输时间，在要求传送数据量较大的场合，速度就慢得多。而同步传输方式去掉了这些起始位和停止位，只在传输数据块时先送出同步头（字符）标志，所以它比异步传输方式速度快。但同步传输方式必须要用一个时钟来协调收发器的工作，所以其设备或控制也较复杂。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">3、</font>在串行通信中，发送设备和接收设备之间除了采用相同的字符帧格式(异步通信)或相同的同步字符(同步通信)来协调同步工作外，两者之间发送数据的速度和接收数据的速度也必须相同，这样才能保证被传送数据的成功传送。</p>\n<p>\n&nbsp;&nbsp;（1）串行数据传输速率有两个概念，即每秒传送的位数——比特率(bps，Bit\nper second)和每秒传送的符号数——波特率(Band rate)。</p>\n<p>&nbsp;（2）在一般的基带通信中，波特率即等于比特率；而在应用调制解调器等的非基带通信中，波特率与调制速率有关，波特率小于等于比特率。</p>\n<p>&nbsp; （3）波特率是串行通信的重要指标，对数据的成功传送至关重要。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">4、</font>在最基本的串行通信中，数据是在两个站之间传送的。根据信息传送方向的不同可分为单工、半双工和全双工3种形式。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">5、</font><font face=\"Times New Roman\">51</font>系列单片机有一个可编程的全双工串行通信接口，根据所选择的工作方式，它可作为<font face=\"Times New Roman\">UART</font>，也可作同步移位寄存器；其帧格式可为<font face=\"Times New Roman\">8</font>位、<font face=\"Times New Roman\">10</font>位或<font face=\"Times New Roman\">11</font>位，并可以设置各种不同的波特率。</p>\n<p>&nbsp;（1）方式0为同步移位寄存器输入/输出工作方式。8位串行数据的输入或输出都是通过RXD端，而TXD端用于输出同步移位脉冲。波特率固定为单片机振荡频率(fosc)的1/12。串行传送数据8位为一帧(没有起始、停止、奇偶校验位)。由RXD(P3.0)端输出或输入，低位在前，高位在后。TXD(P3.1)端输出同步移位脉冲，可以作为外部扩展的移位寄存器的移位时钟，因而串行口方式0常用于扩展外部并行I/O口。</p>\n<p>&nbsp;（2）方式1为波特率可变10位异步通信接口。字符帧由一位起始位(0)、8位数据位和一位停止位(1)组成；</p>\n<p>通信波特率可变，由定时器T1的计数溢出率决定。</p>\n<p>&nbsp;（3）方式2和方式3下，串行口工作在11位异步通信方式。一帧信息包含一个起始位(0)、8个数据位、一个可编程第9数据位和一个停止位(1)。其中可编程位是SCON中的TB8位(发送时)或RB8位(接收时)，在8个数据位之后，可作奇偶校验位或地址/数据帧的标志位使用。方式2和方式3两者的差异仅在于通信波特率有所不同，方式2的波特率是固定的，由主频fosc经32（PCON的SMOD位=0时）或64分频（PCON的SMOD位=1时）后提供，而方式3的波特率由定时器T1的计数溢出率决定。</p>"},{"title":"51指令系统（2）","date":"2012-10-19 13:36:13","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012r7r.html","content":"<p><font style=\"FonT-siZe: 18px\" color=\"#1501FF\"><strong>编程1：</strong></font>将存于内部RAM地址20H~25H的6位非压缩BCD码转换为对应的ASCII码依次存至30H开始的连续内部RAM单元中。</p>\n<p>&nbsp;</p>\n<p>\n<em>分析：非压缩BCD码00H、01H、02H、…、09H对应ASCII码30H、31H、32H、…、39H，两者差为30H；</em></p>\n<p><em>&nbsp;</em></p>\n<p><em>程序如下：</em></p>\n<p><em>LL: &nbsp; MOV\nR0,#20H&nbsp;&nbsp; ；源数据串开始地址装入R0</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV R1,#30H&nbsp;&nbsp;；目的数据串开始地址装入R1</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\nR2,#6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；循环次数装入R2</em></p>\n<p><em>L0:&nbsp;&nbsp;&nbsp;MOV\nA,@R0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；取一字节非压缩BCD码</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORL\nA,30H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；转化为对应ASCII码</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\n@R1,A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；保存至对应目的位置</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改源数据地址以指向下一位置</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改目的数据地址指向下一位置</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DJNZ\nR2,L0&nbsp;&nbsp;&nbsp;；循环进行下一字节的处理</em></p>\n<p>\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；处理结束，程序返回</em></p>\n<p><font color=\"#1501FF\" size=\"4\"><strong>编程2：</strong><font style=\"FonT-siZe: 14px\" color=\"#000000\" size=\"3\">实现将0~49之间的偶数依次存于内部RAM地址20H开始的字节单元，将奇数依次存于内部RAM地址40H开始的字节单元。</font></font></p>\n<p>&nbsp;</p>\n<p><em>程序如下：</em></p>\n<p><font size=\"3\"><font style=\"FonT-siZe: 14px\"><em>LL:\n&nbsp; MOV R0,#20H&nbsp;&nbsp;；偶数存放开始地址装入R0</em></font></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV R1,#40H&nbsp;&nbsp;；奇数存放开始地址装入R1</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLR\nA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；起始数码=0</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>L0:&nbsp;&nbsp; MOV\nA,@R0&nbsp;&nbsp;&nbsp;&nbsp;；存放一个偶数</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；数码加1</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\nA,@R1&nbsp;&nbsp;&nbsp;&nbsp;；存放一个奇数</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；数码加1</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改偶数存放地址指针指向下一位置</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改奇数存放地址指针指向下一位置</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CJNE A,#50,L0 ；是否所有数码都已放完，未完则继续循环</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；工作完成，程序返回</em></font></p>\n<p>&nbsp;</p>\n<p><strong><font color=\"#1501FF\" size=\"4\">编程3：</font></strong><font style=\"FonT-siZe: 14px\" color=\"#000000\" size=\"3\">实现5字节10位压缩BCD码加法。设两个加数分别存放于内部RAM地址40H和45H开始的字节单元（低位字节在前），相加结果存放于内部RAM地址4AH开始的字节单元，不考虑超出5字节压缩BCD码存储范围以外的进位。</font></p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 14px\"><em>程序如下：</em></font></p>\n<p><em>LL: &nbsp; MOV\nR0,#40H&nbsp;&nbsp; ；加数A的开始地址装入R0</em></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV R1,#45H&nbsp;&nbsp;；加数B的开始地址装入R1</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\nR2,#4AH&nbsp;&nbsp;&nbsp;；和数存放开始地址装入R2</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\nR3,#5&nbsp;&nbsp;&nbsp;&nbsp;；循环次数装入R3</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLR\nC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；初始清零CY</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>L0:&nbsp;&nbsp; MOV\nA,@R0&nbsp;&nbsp;&nbsp;&nbsp;；取加数A当前字节</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADDC A,@R1&nbsp;&nbsp;&nbsp;；加上加数B当前字节，通过带进位加法考虑低位字节可能的进位</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD\nA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；调整运算结果为BCD码，可能的进位保存在CY中（以下的指令执行均不影响CY）</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；以下三条交换指令交换和数指针到R1，加数B指针到R2</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV\n@R1,A&nbsp;&nbsp;&nbsp;&nbsp;；保存和数当前字节</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；以下三条交换指令恢复加数B指针到R1，和数指针到R2</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XCH\nA,R2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改加数A存放地址指针指向下一位置</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改加数B存放地址指针指向下一位置</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC\nR2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；修改和数存放地址指针指向下一位置</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DJNZ R3,L0&nbsp;&nbsp;&nbsp;；循环次数减1，若不为0则继续循环</em></font></p>\n<p><font style=\"FonT-siZe: 14px\"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；工作结束，程序返回</em></font></p>"},{"title":"51单片机在片设备与中断（1）","date":"2012-10-19 08:53:02","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012qye.html","content":"<p><font style=\"FonT-siZe: 18px\"><strong><font color=\"#000BFF\">并行端口要点</font></strong></font></p>\n<ol>\n<li>MCS－51单片机内部有4个8位的并行I/O口P0、P1、P2、P3。其中P3口、P2口、P1口为准双向口，P0口为双向的三态数据线口。各端口均由端口锁存器、输出驱动器、输入缓冲器等构成。各端口除可进行字节的输入/输出外，每个位口线还可单独用作输入/输出，实际应用非常方便。</li>\n<li>对并行I/O口的“读—修改—写”类指令（例如 CPL\nP0.0、ANL\nP1,#0FH等）实际是读出对应的端口锁存器的内容，执行修改后再写回到端口锁存器中。之所以是“读锁存器”而不是“读引脚”，是为了避免因引脚外部电路的原因而使引脚的状态发生改变而造成误读。</li>\n<li>\n<p>P0口是一个三态双向I/O口，在需要进行外部ROM、RAM等扩展时，采用分时复用的方式，通过地址锁存器后作为地址总线的低8位和8位数据总线；在不需要进行外部ROM、RAM等扩展时，作为通用的I/O口使用。P0在用作通用输出口时必须外接上拉电阻，用作输入口时，则必须先把锁存器写入1。P0口的输出级具有驱动8个LSTTL负载的能力。</p>\n</li>\n<li>\n<p>当不需要在单片机芯片外部扩展程序存储器，只需扩展256字节的片外RAM时，访问片外RAM就可以利用“MOVX\nA，@Ri”，“MOVX\n@Ri，A”类指令来实现。这时只用到了地址线的低8位，P2口不受该类指令的影响，仍可以作为通用I/O口使用。</p>\n</li>\n<li>\n<p>P3口相应的端口线处于第二功能，应满足的条件是：</p>\n<p>&nbsp;&nbsp;串行I/O口处于运行状态(RXD，TXD)。</p>\n<p>&nbsp;&nbsp;外部中断已经打开(INT0、INT1)。</p>\n<p>&nbsp;&nbsp;定时/计数器处于外部计数状态(T0、T1)。</p>\n<p>&nbsp;&nbsp;执行读/写外部RAM的指令(RD、WR)。&nbsp;&nbsp;</p>\n</li>\n</ol>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 18px\"><strong><font color=\"#000BFF\">定时/计数器4种工作方式的特点</font></strong></font></p>\n<ol>\n<li>方式0是13位计数器，最大计数值213=8192，计数范围比方式1小，计算定时初值比较麻烦，容易出错，与方式1比较无任何优点(设计初衷是为了兼容更早的48系列单片机)。</li>\n<li>方式1是16位计数器，最大计数值为216=65536，计数范围大，适用于定时范围较大的应用场合。</li>\n<li>方式2是8位计数器，最大计数值是28=256，缺点是计数范围小，优点是定时初值可自动恢复，适用于需要重复定时，而定时范围还不大的应用场合。</li>\n<li>方式3是8位计数器，仅适用于T0，T1无方式3。T0方式3时，被拆成两个独立的8位计数器TH0、TL0：TL0使用T0原有的控制寄存器组成一个8位的定时/计数器；TH0借用T1的TF1、TR1，只能对机内机器周期脉冲计数，组成另一个8位定时器。T0方式3时T1方式2作串行口波特率发生器。</li>\n</ol>\n<p><font style=\"FonT-siZe: 18px\"><strong><font color=\"#000BFF\">定时器初值的计算</font></strong></font></p>\n<p>定时时间的计算公式为：</p>\n<p>&nbsp;&nbsp;&nbsp;T=(M-TC)&times;T0&nbsp;&nbsp;（或TC=M-T/T0 ）</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中 T ：定时器的定时时间，即设计任务要求的定时时间；</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T0：计数器计数脉冲的周期，即单片机系统主频周期的12倍；</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M ：计数器在相应工作方式下的计数模值；</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC：定时器需要预置的初值。</p>\n<p>若设初值TC=0，则定时器定时时间为最大。当单片机系统主频为12MHz时，各种工作方式下定时器的最大定时时间为：</p>\n<p>&nbsp;&nbsp;&nbsp;工作方式0&nbsp;&nbsp; ：&nbsp;&nbsp;Tmax=2^13&times;1us=8.192ms</p>\n<p>&nbsp;&nbsp;&nbsp;工作方式1&nbsp;&nbsp; ：&nbsp;&nbsp;Tmax=2^16&times;1us=65.536ms</p>\n<p>&nbsp;&nbsp;&nbsp;工作方式2和3：&nbsp;&nbsp;Tmax=2^8&times;1us=0.256ms</p>\n<p>&nbsp;</p>"},{"title":"51指令系统（1）","date":"2012-10-19 08:32:49","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012qy3.html","content":"<p><strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></p>\n<p><font style=\"FonT-siZe: 18px\"><font color=\"#0400FF\"><strong>填空</strong></font></font></p>\n<p>1、机器指令一般是由( 操作码&nbsp;&nbsp;)和( 操作数&nbsp;&nbsp;)所组成，也可能仅由(&nbsp; 操作码&nbsp;&nbsp;)组成。</p>\n<p>2、若用传送指令访问MCS-51的程序存储器，它的操作码助记符应为(&nbsp;MOVC&nbsp;&nbsp;)。</p>\n<p>3、若用传送指令访问MCS-51的片内数据存储器，它的操作码助记符应为(&nbsp;MOV&nbsp;&nbsp;)。</p>\n<p>4、若访问MCS-51的片外数据存储器，它的操作码助记符应为(\nMOVX&nbsp;&nbsp;)。</p>\n<p>5、累加器（A）=80H，执行完指令ADD\nA，#83H后，进位位C=(&nbsp;1&nbsp;)。</p>\n<p>6、执行ANL&nbsp; A，#0FH指令后，累加器A的高4位=(\n0000&nbsp;&nbsp;)。</p>\n<p>7、JZ&nbsp; rel的操作码地址为1000H，rel=20H，它的转移目的地址为( 1022H&nbsp;)。</p>\n<p>8、JBC&nbsp; 00H，rel 操作码的地址为2000H，rel=70H，它的转移目的地址为(&nbsp;2073H&nbsp;&nbsp; )。</p>\n<p>9、累加器（A）=7EH，内部RAM（20H）=\n04H，MCS-51执行完ADD&nbsp; A，20H指令后PSW.0=(&nbsp;0&nbsp;)。</p>\n<p>10、MOV&nbsp; PSW，#10H是将MCS-51的工作寄存器置为第(&nbsp;&nbsp; 2\n&nbsp;&nbsp;)组。</p>\n<p>11、首地址在2000H的指令LCALL&nbsp; 37B0H，其所完成的操作是(\n2003H&nbsp;)入栈，( 37B0H&nbsp;)送PC。</p>\n<p>12、MOVX&nbsp; A，@DPTR源操作数寻址方式为( 寄存器间接寻址&nbsp;)。</p>\n<p>13、ORL&nbsp;&nbsp;A，#\n0F0H是将A的高4位置1，而低4位(保持不变&nbsp;)。</p>\n<p>14、SJMP&nbsp; rel的指令操作码地址为0050H，rel=65H，那么它的转移目标地址为(&nbsp;00B7H&nbsp;)。</p>\n<p>15、设DPTR=2000H，（A）=80H，则MOVC&nbsp; A，@A+DPTR的源操作数的实际地址为( 2080H&nbsp;)。</p>\n<p>16、MOV&nbsp; C，20H源寻址方式为( 位&nbsp;)寻址。</p>\n<p>17、在直接寻址方式中，只能使用(&nbsp;8&nbsp;&nbsp;)位二进制数作为直接地址，因此其寻址对象只限于( 片内RAM&nbsp;&nbsp;)。</p>\n<p>18、在寄存器间接寻址方式中，其“间接”体现在指令中寄存器的内容不是操作数，而是操作数的(&nbsp; 地址&nbsp;&nbsp;)。</p>\n<p>19、在变址寻址方式中，以(&nbsp;A&nbsp;&nbsp;)作变址寄存器，以(\nPC&nbsp;&nbsp;)或(&nbsp;DPTR&nbsp;&nbsp;)作基址寄存器。</p>\n<p>20、假定累加器A中的内容为30H，执行指令</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000H：MOVC&nbsp;&nbsp;A,@A+PC</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，程序存储器(\n1031H&nbsp;&nbsp;)单元的内容被送入累加器A中。</p>\n<p>21、MOVX&nbsp; A，@DPTR源操作数寻址方式为(寄存器间接寻址&nbsp;)。</p>\n<p>22、下列程序段的功能是( 交换A、B的内容)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;ACC</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;B</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;&nbsp;&nbsp;ACC</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;&nbsp;&nbsp;B</p>\n<p>23、假定（SP）=60H，（ACC）=30H，（B）=70H，执行下列指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;ACC</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;B</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，SP的内容为(&nbsp;62H&nbsp;&nbsp;)，61H单元的内容为(\n30H&nbsp;&nbsp;)，62H单元的内容为(\n70H&nbsp;&nbsp;)。</p>\n<p>24、假定（SP）=62H，（61H）=30H，（62H）=70H，执行下列指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;DPH</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;DPL</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，DPTR的内容为(7030H)，SP的内容为(\n60H&nbsp;)。</p>\n<p>25、假定（A）=85H，（R0）=20H，（20H）=0AFH。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;A，@R0</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为( 34H&nbsp;)，CY的内容为(\n1&nbsp;)，AC的内容为(&nbsp;1&nbsp;&nbsp;)，OV的内容为(&nbsp;1&nbsp;&nbsp;)。&nbsp;</p>\n<p>26、假定（A）=85H，（20H）=0FFH，（CY）=1，执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADDC&nbsp;A，20H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为(\n85H&nbsp;&nbsp;)，CY的内容为(\n1&nbsp;)，AC的内容为(\n1&nbsp;)，OV的内容为(\n0&nbsp;)。</p>\n<p>27、执行完以下LCALL指令后，PC=(\n4000H&nbsp;)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORG&nbsp;&nbsp;2000H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LCALL&nbsp; 4000H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORG&nbsp;&nbsp;&nbsp;4000H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;&nbsp;&nbsp;A，R2&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>28、假定（A）=0FFH，（R3）=0FH，（30H）=0F0H，（R0）=40H，（40H）=00H。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;&nbsp; A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;&nbsp; R3</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;&nbsp; 30H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;&nbsp; @R0</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为(\n00H&nbsp;)，R3的内容为( 10H\n)，30H的内容为(\n0F1H&nbsp;)，40H的内容为( 01H\n)。</p>\n<p>29、假定（A）=56H，（R5）=67H。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;&nbsp; A，R5</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DA&nbsp;&nbsp;&nbsp;A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为(00100011B&nbsp;)，CY的内容为(\n1 )。</p>\n<p>30、假定（A）=56，（R5）=67。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD&nbsp;&nbsp; A，R5</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DA&nbsp;&nbsp;&nbsp;A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为(10000001B&nbsp;)，CY的内容为(\n0 )。</p>\n<p>31、假定（A）=0FH，（R7）=19H，（30H）=00H，（R1）=40H，（40H）=0FFH。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEC&nbsp;&nbsp;A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEC&nbsp;&nbsp;R7</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEC&nbsp;&nbsp;30H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEC&nbsp;&nbsp;@R1</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为( 0EH )，R7的内容为(\n18H&nbsp;)，30H的内容为( 0FFH\n)，40H的内容为(\n0FEH&nbsp;)。</p>\n<p>32、假定（A）=50H，（B）=0A0H。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MUL&nbsp;&nbsp; AB</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，寄存器B的内容为(32H&nbsp;)，累加器A的内容为(\n00H&nbsp;)，CY的内容为(\n0&nbsp;)，OV的内容为( 1\n)。</p>\n<p>33、假定（A）=0FBH，（B）=12H。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIV&nbsp;&nbsp; AB</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为( 0DH&nbsp;)，寄存器B的内容为(\n11H&nbsp;)，CY的内容为(\n0&nbsp;)，OV的内容为( 0\n)。</p>\n<p>34、假定（A）=0C5H，执行指令：&nbsp;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SWAP&nbsp;&nbsp;A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，累加器A的内容为( 5CH&nbsp;)。</p>\n<p>35、假定addr11=00100000000B，标号qaz的地址为1030H。执行指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qaz：AJMP&nbsp;addr11</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;后，程序转移到地址(\n1100H&nbsp;)去执行。</p>\n<p>36、假定A=83H，（R0）=17H，（17H）=34H，执行以下指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANL&nbsp;A,#17H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORL&nbsp;17H,A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XRL&nbsp;A,@R0</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPL&nbsp;&nbsp;A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后，A的内容为(\n0C8H&nbsp;)。</p>\n<p>37、设SP=60H，片内RAM的（30H）=24H，（31H）=10H，在下列程序段注释中填写执行结果。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;30H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；SP=( 61H&nbsp;)，（SP）=( 24H )</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;31H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；SP=( 62H&nbsp;)，（SP）=( 10H )</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;DPL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；SP=(&nbsp;61H )，DPL=( 10H&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POP&nbsp;DPH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；SP=(\n60H&nbsp;)，DPH=( 24H&nbsp;)</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; A，#00H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVX&nbsp;&nbsp; @DPTR，A</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;最后执行结果是(&nbsp; 将0传送到外部数据存储器的2410H单元&nbsp;&nbsp;)。</p>\n<p>38、若单片机使用频率为6MHz的晶振，那么时钟周期为(0.334us&nbsp;)，机器周期为( 2us&nbsp;)。</p>\n<p>39、在R7初值为00H的情况下，DJNZ&nbsp;R7，rel指令将循环执行( 256&nbsp;)次。</p>\n<p>40、欲使P1口的低4位输出0而高4位不变，则执行一条(&nbsp;ANL&nbsp;P1，#0F0H&nbsp;&nbsp;)指令。</p>\n<p>41、欲使P1口的高4位输出1而低4位不变，则执行一条(&nbsp;ORL&nbsp;P1，#0F0H&nbsp;&nbsp;)指令。</p>\n<p>42、DIV&nbsp;AB指令执行后，OV标志为1，则此指令执行前B=( 00H\n)。</p>\n<p>43、MUL&nbsp;AB指令执行后，OV标志为1，则B的内容不为( 00H\n)。</p>\n<p>44、用一条指令(LJMP&nbsp;&nbsp;1234H&nbsp;)可以取代下列4条指令：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;&nbsp;&nbsp;DPTR，#1234H</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;&nbsp;DPL</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUSH&nbsp;&nbsp;&nbsp;DPH</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET</p>\n<p>45、要访问特殊功能寄存器，可以采用的寻址方式是( 直接寻址)、( 位寻 址)和( 寄存器寻址&nbsp;)。</p>\n<p>46、要访问片外RAM，应采用的寻址方式是(&nbsp;寄存器间接寻址&nbsp;)。</p>\n<p>47、已知SP=25H，PC=2345H，（24H）=12H，（25H）=34H，（26H）=56H。此时执行“RET”指令后，SP=(\n23H&nbsp;)，PC=( 3412H&nbsp;)。</p>\n<p>&nbsp;</p>"},{"title":"51单片机基础（5）","date":"2012-10-17 15:27:03","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012pte.html","content":"<p><font style=\"FonT-siZe: 18px\" color=\"#0103FC\"><strong>[原创]</strong>\n51单片机到底有几个存储空间？该如何全面认识51单片机的存储结构？</font></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">1、</font>对程序员来讲，最基本的51单片机具有如下3个存储空间：</p>\n<p>&nbsp;（1）内部数据空间，地址范围0~255，使用MOV指令和8位地址进行直接和间接访问，当然也有更多的操作类指令如ANL、ADD等可以直接或间接地访问该空间；</p>\n<p>\n&nbsp;&nbsp;（2）外部数据空间，地址范围0~65535，（仅可）使用MOVX指令配合存于DPTR中的16位地址或存于R0、R1中的（低）8位地址进行寄存器间接方式的读写访问；使用8位地址访问外部数据空间实际是默认更高位的地址须由其它输出口线事先指定或实际配置的外部数据存储器不超过256字节而没有更高位的地址线需要给定；</p>\n<p>\n&nbsp;（3）程序存储空间，地址范围0~65535，（仅可）使用MOVC指令配合作为基地址的存于DPTR中的16位地址或当前PC中的16位地址和事先传送到累加器A中的8位变地址进行基址变址方式的只读访问；</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">2、</font>内部和外部数据存储器的区分不在于数据存储器位于单片机内部或外部，而是在于数据存储器与CPU的紧密程度，或者说CPU访问它们的方便程度。</p>\n<p>&nbsp;（1）实际上51的内部数据存储器与CPU结合非常紧密，甚至位于内部数据空间的ACC、PSW乃至其它SFR其实可以认为就是CPU的一部分，如此就可以说内部数据存储器就是位于CPU内部的数据存储器；由于各种指令直接或间接寻址的支持，CPU对位于内部数据空间的数据存储器的访问是非常方便的，而外部数据空间的数据存储器可称为外部RAM(或记为<font color=\"#ED1C24\">X</font>RAM)，就是特别指明需要用MOV<font color=\"#ED1C24\">X</font>指令间接寻址才能访问的数据存储器。</p>\n<p>&nbsp;（2）内部数据存储器一定是位于51单片机内部的，而外部数据存储器则不能说一定就位于单片机的外部。为了应用方便（节省I/O口线，避免通过外部总线扩展XRAM的麻烦，以及节省物理空间等），很多增强的51系列单片机都将一定量的XRAM集成到芯片的内部，即便如此，这些数据存储器使用的是外部数据空间，因此仍然（也只能）是外部数据存储器。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#ED1C24\">3、</font>最基本51单片机的内部数据存储空间可进一步划分为寄存器组区（地址0~31，共32字节）、位寻址区（地址32~47，共16字节）、用户RAM区（地址48~127，共80字节）和SFR区（地址128~255，共128字节）等4个功能区；</p>\n<p>&nbsp;（1）寄存器组区的32字节内部RAM分为4组（地址0~7、8~15、16~23、24~31），称为4个寄存器组（依次称为寄存器组0、1、2和3），每组8个字节分别命名为寄存器R0、R1、...、R7，可通过PSW寄存器中的RS1、RS0位组合（即PSW.4和PSW.3）选择其中一组为当前寄存器组。当前寄存器组中的寄存器R0~R7可在51单片机的汇编指令中以直接引用的方式非常方便地进行读写访问（例如MOV\nA，<font color=\"#ED1C24\">R1</font>)，而对非当前寄存器组中的寄存器则可按一般内部RAM单元使用8位内部RAM地址进行直接和间接访问。寄存器组区的所有32字节也都可以作为一般内部RAM单元访问和使用。51单片机指令系统中除了累加器A以外，可直接引用的当前寄存器R0~R7是最为高效方便的了。</p>\n<p>&nbsp;（2）51单片机有一整套位操作指令，可以通过8位位地址对位于内部数据空间的256个二进制位进行直接访问，可以认为这是一个通过8位位地址访问的位地址空间。片内RAM地址32~47上的16个字节共有128个二进制位，占据了前述256位地址空间中的前半部分（位地址0~127），因此称这16个字节所在的片内RAM区为位寻址区，它们即可以按字节寻址，其中的每一位也可以按位寻址。</p>\n<p>&nbsp; （3）内部RAM中剩余的部分可用于一般的数据暂存或设置为堆栈区段。</p>\n<p>\n&nbsp;&nbsp;（4）特殊功能寄存器（SFR）区总计有128字节的空间，其中离散地分布着最基本51单片机的21个特殊功能寄存器。这些特殊功能寄存器实际上是单片机功能部件在内存中的映像，是CPU访问功能部件的通道和手段。其中除了A、B、PSW、SP和DPTR等CPU自身的部分以外，其余都是在片设备和端口的访问窗口，CPU通过这些窗口对其进行配置和应用。后继的各种不同的51单片机如果增加了更多的在片设备和接口，最终都要通过在SFR区设计安放更多的特殊功能寄存器来体现给CPU。那些所在地址能被8整除的特殊功能寄存器，它们的每个位都是具有位地址的，因此也是可以按位访问的。每个位的位地址就等于其所在特殊功能寄存器的地址加上该位的位序号（例如PSW的内部RAM字节地址是0D0H，该地址能够被8整除，所以PSW的每一位都分配有位地址，而CY是PSW的最高第7位，则CY的位地址就是0D0H+7=0D7H）。位地址空间的后半部分都是这样分配给特殊功能寄存器的功能位的，那些最需要按位访问的特殊功能寄存器都分配在可以具有位地址的字节地址上。</p>\n<p>&nbsp;（5）基本51单片机只有128字节的内部RAM，可使用字节地址0~127进行直接或间接访问，而52单片机则有256字节的内部RAM。增加的128字节RAM只能使用字节地址128~255进行间接访问，并且事先规定特殊功能寄存器只能通过字节地址或位地址进行直接访问，通过这种办法规避了与SFR所占地址空间的冲突。由于堆栈操作本身就是根据SP的值对内部RAM单元进行的间接访问，因此增加的128字节高地址RAM可以用作堆栈区段。</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#FF0000\">4、</font>[“关于通过#EA引脚选择的片内/片外程序存储空间”&nbsp;&nbsp;待续...]</p>"},{"title":"51单片机基础（4）","date":"2012-10-16 21:44:18","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012p9w.html","content":"<p><strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0D00FE\"><strong>判断(<font color=\"#000000\">正确</font>/<font color=\"#ED1C24\">错误</font>)</strong></font></p>\n<p><font color=\"#ED1C24\">1、当MCS-51上电复位时，堆栈指针SP=00。</font></p>\n<p><font color=\"#ED1C24\">2、PC存放的是当前正在执行的指令。</font></p>\n<p><font color=\"#ED1C24\">3、MCS-51的特殊功能寄存器分布在60H~80H地址范围内。</font></p>\n<p><font color=\"#ED1C24\">4、在MCS-51系统中，一个机器周期等于1us。</font></p>\n<p><font color=\"#ED1C24\">5、8031的CPU是由RAM和EPROM所组成。</font></p>\n<p>6、PC可以看成是程序存储器的地址指针。</p>\n<p>7、判断以下有关PC和DPTR的结论是否正确？</p>\n<p>&nbsp; A、DPTR是可以访问的，而PC不能访问。</p>\n<p>&nbsp; B、它们都是16位的存储器。</p>\n<p><font color=\"#ED1C24\">&nbsp;C、它们都有自动加“1”的功能。</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>&nbsp; D、DPTR可以分为两个8位的寄存器使用，但PC不能。</p>\n<p>8、程序计数器PC不能为用户编程时直接使用，因为它没有地址。</p>\n<p><font color=\"#ED1C24\">9、内部RAM的位寻址区，只能供位寻址使用，而不能供字节寻址使用。</font></p>\n<p><font color=\"#ED1C24\">10、8031共有21个特殊功能寄存器，它们的位都是可以用软件设置的，因此，是可以进行位寻址的。</font></p>\n<p><font color=\"#ED1C24\">11、MCS—51单片机是高档16位单片机。</font></p>\n<p>12、MCS—51的产品8051与8031的区别是：8031片内无ROM。</p>\n<p>13、8051的累加器ACC是一个8位的寄存器，简称为A，用来存一个操作数或中间结果。</p>\n<p>14、8051的程序状态字寄存器PSW是一个8位的专用寄存器，用于存程序运行中的各种状态信息。</p>\n<p>\n15、MCS—51的数据存贮器在物理上和逻辑上都分为两个地址空间：一个是片内的256字节的RAM，另一个是片外最大可扩充64K字节的\nRAM。</p>\n<p>16、单片机的复位有上电自动复位和按钮手动复位两种，当单片机运行出错或进入死循环时，可按复位键重新启动。</p>\n<p><font color=\"#ED1C24\">17、单片机的一个机器周期是指完成某一个规定操作所需的时间，一般情况下，一个机器周期等于一个时钟周期组成。</font></p>\n<p>18、单片机的指令周期是执行一条指令所需要的时间。一般由若干个机器周期组成。</p>\n<p><font color=\"#ED1C24\">19、单片机系统扩展时使用的锁存器，是用于锁存高8位地址的。</font></p>\n<p><font color=\"#ED1C24\">20、MCS—51单片机上电复位后，片内数据存储器的内容均为00H。</font></p>\n<p><font color=\"#ED1C24\">21、MCS—51单片机的数据存贮器是指外部存贮器。</font></p>\n<p>22、MCS—51单片机的特殊功能寄存器集中布置在片内数据存贮器的一个区域中。</p>\n<p>23、当8051单片机的晶振频率为12MHz时，ALE地址锁存信号端的输出频率为2MHz的方脉冲。</p>"},{"title":"51单片机基础（3）","date":"2012-10-16 21:35:56","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012p9o.html","content":"<p><strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#1502FD\"><strong>选择</strong></font></p>\n<p>1、当MCS-51复位时，下面说法正确的是(&nbsp;&nbsp;A&nbsp; )。</p>\n<p>A、\nPC=0000H&nbsp;&nbsp;&nbsp;</p>\n<p>B、\nSP=00H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>C、\nSBUF=00H&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、 P0=00H</p>\n<p>2、PSW=18H时，则当前工作寄存器是(&nbsp; D&nbsp;)。</p>\n<p>A、 0组</p>\n<p>B、 1组</p>\n<p>C、 2组</p>\n<p>D、 3组</p>\n<p>3、MCS-51上电复位后，SP的内容应是(&nbsp;B&nbsp;&nbsp;)。</p>\n<p>A、\n00H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>B、\n07H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>C、\n60H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、 70H</p>\n<p>4、当ALE信号有效时，表示(&nbsp;B&nbsp;&nbsp;)。</p>\n<p>A、 从ROM中读取数据</p>\n<p>B、 从P0口可靠地送出低8位地址</p>\n<p>C、 从P0口送出数据</p>\n<p>D、 从RAM中读取数据</p>\n<p>5、MCS—51单片机的CPU主要的组成部分为(&nbsp; A&nbsp;)。</p>\n<p>A、运算器、控制器</p>\n<p>B、加法器、寄存器&nbsp;&nbsp;</p>\n<p>\nC、运算器、加法器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、运算器、译码器</p>\n<p>6、单片机上电复位后，PC的内容和SP的内容为(&nbsp; B&nbsp;)。</p>\n<p>A、0000H，00H</p>\n<p>B、0000H，07H</p>\n<p>C、0003H，07H</p>\n<p>D、0800H，08H</p>\n<p>\n7、单片机8031的ALE引脚是(&nbsp;&nbsp;B&nbsp;&nbsp;)。</p>\n<p>A、输出高电平</p>\n<p>B、输出矩形脉冲，频率为fosc的1/6</p>\n<p>C、输出低电平</p>\n<p>D、输出矩形脉冲，频率为fosc的1/2</p>\n<p>8、访问外部存贮器或其它接口芯片时，作数据线和低8位地址线的是(&nbsp;A&nbsp; )。</p>\n<p>A、P0口</p>\n<p>B、P1口</p>\n<p>C、P2口</p>\n<p>D、P0口 和 P2口</p>\n<p>9、PSW中的RS1和RS0用来(&nbsp; A&nbsp; )。</p>\n<p>A、选择工作寄存器区号&nbsp; &nbsp;</p>\n<p>B、指示复位&nbsp;</p>\n<p>C、选择定时器&nbsp;&nbsp;</p>\n<p>D、选择工作方式</p>\n<p>10、上电复位后，PSW的值为(&nbsp;D&nbsp;&nbsp;)。</p>\n<p>\nA、1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>\nB、07H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>\nC、FFH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、0</p>\n<p>11、单片机8031上电复位后，堆栈区的最大允许范围是(&nbsp;B&nbsp; ) 个单元。</p>\n<p>\nA、64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>B、120&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>C、128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、256</p>\n<p>12、单片机8031上电复位后，堆栈区的最大允许范围是内部RAM的(&nbsp;D&nbsp; )。</p>\n<p>A、00H—FFH</p>\n<p>B、00H—07H</p>\n<p>C、07H—7FH</p>\n<p>D、08H—7FH</p>\n<p>13、对于8031单片机，其内部RAM(&nbsp; D&nbsp;)。</p>\n<p>A、只能位寻址</p>\n<p>\nB、只能字节寻址&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>C、既可位寻址又可字节寻址</p>\n<p>D、少部分能位寻址&nbsp;</p>\n<p>14、8031 单片机若晶振频率为fosc=12MHz，则一个机器周期等于(&nbsp;C&nbsp; )&nbsp;&micro;S。</p>\n<p>A、1/12</p>\n<p>B、1/ 2</p>\n<p>C、1</p>\n<p>D、2</p>\n<p>15、MCS—51单片机的数据指针DPTR是一个16位的专用地址指针寄存器，主要用来(&nbsp;B&nbsp; )。</p>\n<p>A、存放指令</p>\n<p>\nB、存放16位地址，作间址寄存器使用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>C、存放下一条指令地址</p>\n<p>D、存放上一条指令地址</p>\n<p>16、ALU表示(&nbsp;D&nbsp;&nbsp;)。</p>\n<p>A、累加器</p>\n<p>B、程序状态字寄存器</p>\n<p>C、计数器</p>\n<p>D、算术逻辑部件</p>\n<p>17、单片机上电后或复位后，工作寄存器R0是在(&nbsp; A&nbsp; )\n。</p>\n<p>A、0区00H单元</p>\n<p>B、0区01H单元</p>\n<p>C、0区09H单元</p>\n<p>D、SFR</p>\n<p>18、单片机8031的XTAL1和XTAL2引脚是(&nbsp; D&nbsp;)引脚。</p>\n<p>A、外接定时器</p>\n<p>B、外接串行口</p>\n<p>C、外接中断</p>\n<p>D、外接晶振</p>\n<p>19、单片机8031的VSS（20）引脚是(&nbsp; B&nbsp;)引脚。</p>\n<p>A．主电源+5V</p>\n<p>B．接地</p>\n<p>C．备用电源</p>\n<p>D．访问片外存贮器</p>\n<p>20、单片机8031的VCC（40）引脚是(&nbsp; A&nbsp;)引脚。</p>\n<p>A．主电源+5V</p>\n<p>B．接地</p>\n<p>C．备用电源</p>\n<p>D．访问片外存贮器</p>\n<p>21、单片机8031中，输入/输出引脚中用于专门的第二功能的引脚是(&nbsp;D&nbsp; ) 。</p>\n<p>A、P0</p>\n<p>\nB、P1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>\nC、P2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>D、P3</p>\n<p>22、51单片机复位后，程序计数器PC= (&nbsp; B&nbsp; )\n。即程序从(&nbsp; B&nbsp; )开始执行指令。</p>\n<p>A、0001H</p>\n<p>B、0000H</p>\n<p>C、0003H</p>\n<p>D、0023H</p>\n<p>23、51单片机专用寄存器SFR中的堆栈指针SP的一个特殊的存贮区是用来(&nbsp;C&nbsp; ) ，它是按后进先出的原则存取数据的。</p>\n<p>A、存放运算中间结果</p>\n<p>\nB、存放标志位&nbsp;&nbsp;&nbsp;</p>\n<p>C、暂存数据和地址</p>\n<p>D、存放待调试的程序</p>\n<p>24、单片机的堆栈指针SP始终是指示(&nbsp; B&nbsp; )\n。</p>\n<p>A、堆栈底</p>\n<p>B、堆栈顶</p>\n<p>C、堆栈地址</p>\n<p>D、堆栈中间位置</p>\n<p>25、51单片机复位后，专用寄存器ACC的状态是(&nbsp; C&nbsp;) 。</p>\n<p>A、0000H</p>\n<p>B、07H</p>\n<p>C、00H</p>\n<p>D、0FFH</p>\n<p>26、当程序状态字寄存器PSW状态字中RS1和RS0分别为0和1\n时，系统当前使用的工作寄存器组为(&nbsp; B&nbsp; ) 。</p>\n<p>A、组0</p>\n<p>B、组1</p>\n<p>C、组2</p>\n<p>D、组3</p>\n<p>27、单片机8031单片机中，唯一一个用户可使用的16位寄存器是(&nbsp;D&nbsp; ) 。</p>\n<p>A、PSW</p>\n<p>B、ACC</p>\n<p>C、SP</p>\n<p>D、DPTR</p>\n<p>28、单片机8031的程序计数器PC为16位计数器，其寻址范围是(&nbsp;D&nbsp; ) 。</p>\n<p>A、8K</p>\n<p>B、16K</p>\n<p>C、32K</p>\n<p>D、64K</p>"},{"title":"51单片机基础（2）","date":"2012-10-16 21:26:35","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012p9g.html","content":"<p>&nbsp;<strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0E01FF\"><strong>填空</strong></font></p>\n<p>\n1、当MCS-51引脚ALE有效时，表示从P0口稳定地送出了(&nbsp;&nbsp;低8位&nbsp;&nbsp;&nbsp;)地址。</p>\n<p>2、MCS-51的堆栈是软件填写堆栈指针临时在\n(&nbsp;&nbsp;&nbsp;片内&nbsp;&nbsp;&nbsp;)数据存储器内开辟的区域。</p>\n<p>3、当使用8751且#EA=1，程序存储器地址小于(&nbsp;&nbsp;1000H&nbsp;&nbsp;&nbsp;&nbsp;)时，访问的是片内ROM。</p>\n<p>\n4、MCS-51系统中，当#PSEN信号有效时，表示CPU要从(&nbsp;&nbsp;外部程序&nbsp;&nbsp;&nbsp;&nbsp;)存储器读取信息。</p>\n<p>5、MCS-51有4组工作寄存器，它们的地址范围是(&nbsp;00H~1FH&nbsp;&nbsp;)。</p>\n<p>\n6、MCS-51片内20H~2FH范围内的数据存储器，既可以字节寻址又可以(&nbsp;&nbsp;位&nbsp;&nbsp;&nbsp; )寻址。</p>\n<p>7、PSW中RS1&nbsp;RS0=10时，R2的地址为(&nbsp;&nbsp;12H&nbsp;&nbsp;&nbsp;&nbsp;)。</p>\n<p>8、PSW中RS1&nbsp;RS0=11时，R2的地址为(&nbsp;&nbsp;1AH&nbsp;&nbsp;&nbsp;&nbsp;)。</p>\n<p>\n9、单片机系统复位后，（PSW）=00H，因此片内RAM寄存区的当前寄存器是第(&nbsp;&nbsp;0&nbsp;&nbsp;)组，8个寄存器的单元地址为(&nbsp;00H&nbsp;&nbsp;)~(&nbsp;07H&nbsp;&nbsp;&nbsp;)。</p>\n<p>10、PC复位后为(&nbsp;0000H&nbsp;&nbsp;&nbsp;)。</p>\n<p>11、一个机器周期=(&nbsp; 12&nbsp;)个振荡周期=(&nbsp;&nbsp;6&nbsp;&nbsp; )个时钟周期。</p>\n<p>12、PC的内容为(&nbsp;&nbsp;将要执行的指令地址\n&nbsp;)。</p>\n<p>\n13、在MCS－51单片机中，如果采用6MHz晶振，1个机器周期为(&nbsp;&nbsp;2us&nbsp;&nbsp;&nbsp;)。</p>\n<p>\n14、内部RAM中，位地址为30H的位，该位所在字节的字节地址为(&nbsp;&nbsp;26H&nbsp;&nbsp;)。</p>\n<p>15、若A中的内容为63H，那么，P标志位的值为(&nbsp;&nbsp;0&nbsp;&nbsp; )。</p>\n<p>\n16、8051单片机复位后，R4所对应的存储单元的地址为(&nbsp;&nbsp;04H&nbsp;)，因上电时PSW=(&nbsp;&nbsp;00H&nbsp;&nbsp;&nbsp;)，这时当前的工作寄存器区是第(&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp; )组工作寄存器区。</p>\n<p>17、使用8031芯片时，需将#EA引脚接(&nbsp;&nbsp;低&nbsp;&nbsp; )电平，因为其片内无(&nbsp;程 序&nbsp;&nbsp;)存储器。</p>\n<p>18、片内RAM低128个单元可以划分为(\n工作寄存器区&nbsp;&nbsp;)、(&nbsp;位寻址区&nbsp;&nbsp;)和(&nbsp;用户RAM区&nbsp;&nbsp;)等3个主要部分。</p>\n<p>19、通过堆栈操作实现子程序调用，首先就要把(&nbsp;&nbsp;PC&nbsp;&nbsp;)的内容入栈，以进行断点保存；调用返回时，再进行出栈操作，把保存的断点恢复到(&nbsp;&nbsp;PC&nbsp;&nbsp; )。</p>\n<p>\n20、MCS－51单片机程序存储器的寻址范围是由程序计数器PC的位数所决定的，因为MCS－51的PC是16位的，因此其寻址的范围为(&nbsp;&nbsp;64&nbsp;&nbsp;&nbsp;)KB。</p>\n<p>21、MCS-51单片机片内RAM的寄存器共有(&nbsp; 32&nbsp;)个单元，分为(&nbsp; 4&nbsp; )组寄存器，每组(\n8&nbsp;&nbsp;)个单元，以R0~R7作为寄存器名称。</p>\n<p>\n22、单片机的型号为8031/8032时，其芯片引线#EA一定要接(&nbsp;&nbsp;低&nbsp; )电平。</p>"},{"title":"51单片机基础（1）","date":"2012-10-16 07:20:58","cate":"单片机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b01012olz.html","content":"<p><font color=\"#ED1C24\" size=\"5\"><b><strong style=\"FonT-WeiGHT: bold\">以下资料转摘自网络并经适当整理，请参照使用。</strong></b></font></p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0A07FF\">1．&nbsp; 什么是单片机？其主要特点有那些？</font></p>\n<ul>\n<li>单片微型计算机（Single-Chip\nMicrocomputer），简称单片机。就是将微处理器（CPU）、存储器（存放程序或数据的ROM和RAM）、总线、定时器/计数器、输入/输出接口（I/O口）和其它多种功能器件集成在一块芯片上的微型计算机。</li>\n<li>\n单片机的主要特点有：（1）可靠性高（2）便于扩展（3）控制功能强（4）低电压、低功耗（5）片内存储容量较小，除此之外，单片机还具有集成度高、体积小、性价比高、应用广泛、易于产品化等特点。</li>\n</ul>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0A07FF\">2．&nbsp;MCS-51系列单片机在片内集成了哪些主要逻辑功能部件？各个逻辑部件的主要功能是什么？</font></p>\n<ul>\n<li>\nMCS-51单片机在片内集成了中央处理器（CPU）、程序存储器（ROM）、数据存储器（RAM）、定时器/计数器、并行I/O接口、串行I/O接口和中断系统等几大单元。</li>\n<li>\nCPU是整个单片机的核心部件，由运算器和控制器组成。运算器可以完成算术运算和逻辑运算，其操作顺序在控制器控制下进行。控制器是由程序计数器PC（Program\nCounter）、指令寄存器IR（Instruction Register）、指令译码器ID（Instruction\nDecoder）、定时控制逻辑和振荡器OSC等电路组成。CPU根据PC中的地址将欲执行指令的指令码从存储器中取出，存放在IR中，ID对IR中的指令码进行译码，定时控制逻辑在OSC配合下对ID译码后的信号进行分时，以产生执行本条指令所需的全部信号。</li>\n<li>程序存储器（ROM）用于存储程序、常数、表格等。</li>\n<li>数据存储器（RAM）用于存储数据。</li>\n<li>\n<p>\nI/O接口是MCS-51单片机对外部实现控制和信息交换的必经之路，用于信息传送过程中的速度匹配和增加它的负载能力。可分为串行和并行I/O接口。</p>\n</li>\n<li>8051内部有两个16位可编程序的定时器/计数器T0和T1，均为二进制加1计数器。可用于定时和对外部输入脉冲的计数。</li>\n<li>\n8051的中断系统主要由中断允许控制器IE和中断优先级控制器IP等电路组成。可实现对5个中断源的管理。8051的中断系统主要由中断允许控制器IE和中断优先级控制器IP等电路组成。其中，IE用于控制5个中断源中哪些中断请求被允许向CPU提出，哪些中断源的中断请求被禁止；IP用于控制5个中断源的中断请求的优先权级别。</li>\n</ul>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0A07FF\">3．&nbsp;MCS-51系列单片机的引脚中有多少根I/O线？它们与单片机对外的地址总线和数据总线之间有什么关系？其地址总线和数据总线各有多少位？对外可寻址的地址空间有多大？</font></p>\n<ul>\n<li>\nMCS-51单片机有4个I/O端口，每个端口都是8位双向口，共占32根引脚。每个端口都包括一个锁存器（即专用寄存器P0～P3）、一个输入驱动器和输入缓冲器。通常把4个端口称为P0～P3。在无片外扩展的存储器的系统中，这4个端口的每一位都可以作为双向通用I/O端口使用。在具有片外扩展存储器的系统中，P2口作为高8位地址线，P0口分时作为低8位地址线和双向数据总线。</li>\n</ul>\n<p><font style=\"FonT-siZe: 18px\" color=\"#0A07FF\">4．&nbsp; 8051单片机的控制总线信号有哪些？各有何作用？</font></p>\n<ul>\n<li>控制线一共有6条。</li>\n<li>（1）ALE/\n#PROG：地址锁存允许/编程线，配合P0口引脚的第二功能使用。在访问片外存储器时，8051ＣＰＵ在P0.7～P0.0引脚上输出片外存储器低８位地址的同时在ALE/\n上输出一个高电位脉冲，用于把这个片外存储器低８位地址锁存到外部专用地址锁存器，以便空出P0.7～P0.0引脚线去传送随后而来的片外存储器读写数据。在不访问片外存储器时，8051自动在ALE/\n#PROG上输出频率为fosc/6的脉冲序列。该脉冲序列可用作外部时钟源或作为定时脉冲源使用。</li>\n<li>（2）#EA/Vpp：允许访问片外存储器／编程电源线，可以控制8051使用片内ＲＯＭ还是使用片外ＲＯＭ。若\n#EA＝０，则允许使用片内ＲＯＭ；若 #EA＝１则允许使用片外ＲＯＭ。</li>\n<li>（3）#PSEN\n：片外ＲＯＭ选通线，在执行访问片外ＲＯＭ的指令ＭＯＶＣ时，8051自动在#PSEN上产生一个负脉冲，用于片外ＲＯＭ芯片的选通。其他情况下#PSEN线均为高电平封锁状态。</li>\n<li>（4）RST/V<sub>PD</sub>：复位／备用电源线，可以使８０５１处于复位工作状态，高电平有效。</li>\n<li>（5）P3.6/#WR：P3.6引脚的第二功能，片外数据存储器“写选通控制”输出。</li>\n<li>（6）P3.7/#RD：P3.7引脚的第二功能，片外数据存储器“读选通控制”输出。</li>\n</ul>"},{"title":"复习要点10：差分变换法、数字控制器的算法实现","date":"2012-04-19 21:30:19","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100ya0m.html","content":"<p><font color=\"#FF0000\">&#9632;</font>差分变换法</p>\n<p>\n1、在一定的条件下，将计算机控制系统近似地看成是一个连续变化的模拟系统，用模拟系统的理论和方法进行分析和设计，得到模拟控制器，然后再将模拟控制器进行离散化，得到数字控制器，这称为数字控制器的连续化设计方法，也称为模拟化设计方法。</p>\n<p>2、数字控制器的连续化设计步骤：&nbsp;&nbsp;（1）设计假想的连续控制器D(s)：先给出模拟控制器的传递函数D(s)，并将它转换成相应的微分方程；&nbsp;&nbsp; （2）选择采样周期T&nbsp;&nbsp; （3）将D(s)离散化为D(z)&nbsp;&nbsp; （4）设计由计算机实现的控制算法&nbsp;&nbsp; （5）校验</p>\n<p>3、对模拟控制器进行离散化处理有多种方法，其中差分变换法最为简单常用；&nbsp;&nbsp;（1）差分变换法就是在选择一个合适的采样周期T后，将微分方程中的导数用差分替换，用得到的差分方程近似微分方程；&nbsp;&nbsp; （2）常用的差分变换方法有两种：后向差分和前向差分；</p>\n<p>4、结合“差分变换法”相应的例子理解与应用。</p>\n<p><font color=\"#FF0000\">&#9632;</font>数字控制器的算法实现</p>\n<p>\n1、把计算机控制系统经过适当的变换，变成纯粹的离散系统，再用Z变换等工具进行分析设计，称为离散化设计方法，也称为直接设计方法；</p>\n<p>\n2、直接设计法的算法实现首先要根据给定的数字控制器的脉冲传递函数D(z)推导得出数字控制器的差分方程，即控制器第k个采样时刻的输出U(k)与该时刻的偏差e(k)以及之前若干时刻的输出与偏差的关系式。</p>\n<p>3、具体可有直接设计法、串行程序法和并行设计法等三种算法实现方法。</p>\n<p>4、结合“数字控制器算法实现”中相应的例子理解与应用。</p>"},{"title":"复习要点9：PID控制各分量意义与作用、数字PID控制器改进措施","date":"2012-04-19 21:04:14","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y9z6.html","content":"<p><font color=\"#FF0000\">&#9632;</font>PID各控制分量的作用1、比例控制能迅速反映误差，从而减小误差，但比例控制不能消除稳态误差，加大比例系数还会引起系统的不稳定；2、积分控制的作用是只要系统存在误差，积分控制作用就不断积累，并且输出控制量以消除误差，因而只要有足够的时间，积分作用将能完全消除误差，但是如果积分作用太强会使系统的超调量加大，甚至出现振荡；\n3、微分控制可以减小超调量，克服振荡，使系统的稳定性提高，还能加快系统的动态响应速度，减小调整时间，从而改善系统的动态性能，但在特定情况下，微分响应过于灵敏，反而容易引起控制过程振荡，降低调节品质；<font color=\"#FF0000\">&#9632;</font><font color=\"#000000\"><strong>填空：</strong></font>PID控制器的选择应用1、对于一阶惯性对象，负荷变化不大，工艺要求不高，可采用（<u><font color=\"#1604FD\">比例</font></u>）控制。2、对于对于一阶惯性与纯滞后环节串联的对象，负荷变化不大，要求控制精度高，可采用（<u><font color=\"#1604FD\">比例积分</font></u>）控制。</p>\n<p>3、对于纯滞后时间τ较大，负荷变化也较大，控制性能要求高的场合，可采用（<u><font color=\"#1604FD\">比例积分微分</font></u>）控制。</p>\n<p>4、当对象为高阶(二阶以上)惯性环节又有（<u><font color=\"#1604FD\">纯滞后</font></u>）特性，负荷变化较大，控制性能要求也较高时，应采用串级控制、前馈-反馈、前馈-串级或纯滞后补偿控制。</p>\n<p><font color=\"#FF0000\">&#9632;</font><font color=\"#000000\"><strong>填空：</strong></font>数字PID 控制算法</p>\n<p>1、数字PID 控制可采用（<u><font color=\"#1604FD\">位置式</font></u>）和（<u><font color=\"#1604FD\">增量式</font></u>）两种算法实现。</p>\n<p>2、（<u><font color=\"#1604FD\">增量式</font></u>）算法不需要做累加，控制量增量的确定仅与最近几次偏差采样值有关，计算误差对控制量计算的影响较小。而（<u><font color=\"#1604FD\">位置式</font></u>）算法要用到过去偏差的累加值，容易产生较大的累加误差；</p>\n<p>3、（<u><font color=\"#1604FD\">增量式</font></u>）算法得出的是控制量的增量，误动作影响小，必要时还可通过逻辑判断限制或禁止本次输出，不会严重影响系统的工作；</p>\n<p>4、采用（<u><font color=\"#1604FD\">增量式</font></u>）算法易于实现手动到自动的无冲击切换；</p>\n<p><font color=\"#FF0000\">&#9632;</font>数字PID控制器改进1、积分项的改进：积分分离&nbsp;&nbsp;（1）积分分离法的基本思想是：当偏差大于某个规定的门限值时，取消积分作用，从而使积分不至于过大；只有当偏差较小时，才引入积分作用，以消除静差。这样控制量不易进入饱和区，即使进入了饱和区，也能较快退出；\n&nbsp;&nbsp;（2）积分分离门限值应根据具体对象及控制要求确定，太大则可能达不到积分分离的目的，太小则积分介入太少，不利残差消除。2、积分项的改进：抗积分饱和&nbsp;&nbsp;（1）如果执行机构已到极限位置仍不能消除偏差，且由于积分作用PID运算结果继续向某一方向增大，这种情况称为积分饱和；&nbsp;&nbsp;（2）抗积分饱和方法的基本思想是：当控制量进入饱和区后，只执行削弱积分项的累加，而不进行增大积分项的累加，由此可避免控制量长期停留在饱和区；\n3、微分项的改进：不完全微分PID控制4、微分项的改进：微分先行PID控制</p>"},{"title":"复习要点8：采样与量化、ADC0809、DAC0832","date":"2012-04-19 14:22:22","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y9pq.html","content":"<p><font color=\"#FF0000\">&#9632;</font>基本概念</p>\n<p>\n1、采样过程：信号采样就是将连续的模拟信号，通过采样开关按一定时间间隔的闭合和断开，将其抽样成一连串离散脉冲信号的过程；2、采样周期：采样开关两次采样(闭合)的间隔时间T；3、孔径时间：完成一次A/D转换所需的时间；4、孔径误差：由孔径时间决定的对随时间变化的模拟信号的每个采样时刻的最大转换误差；5、采样保持：如果被采样的模拟信号的变化频率相对于A/D转换器的速度来说比较高，为保证转换精度，需要在A/D转换之前加上采样保持电路，使得在A/D转换期间保持输入模拟信号不变。</p>\n<p>6、量化：用一组数码(如二进制码)逼近离散模拟信号的幅值，将其转换为数字信号；7、量化过程：将离散采样信号转换为数字信号的过程；8、量化单位：量化采样信号所用数码最低有效位所对应的模拟量；9、量化误差：量化过程中用量化单位q去度量采样值幅值大小时由于小数归整(四舍五入)而引入的误差，其最大值为±q/2；<font color=\"#FF0000\">&#9632;</font>孔径时间、孔径误差、信号频率之间的关系</p>\n<p>1、对于频率为f的正弦波信号，若孔径时间为t，则孔径误差百分比б=2πft&times;1002、课件第4章44页：对10位A/D转换器，转换精度0.1%，孔径时间10μs，则允许正弦波信号最大频率为f=0.1/(2π&times;0.00001&times;100)≈16Hz。</p>\n<p><font color=\"#FF0000\">&#9632;</font>ADC0809</p>\n<p>1、ADC0809的引脚</p>\n<p>&nbsp;&nbsp; （1）IN0～IN7：8路模拟量输入端。</p>\n<p>&nbsp;　（2）DB7～DB0：8位数字量输出端。</p>\n<p>&nbsp;　（3）ADDA、ADDB、ADDC：3位地址输入线，用于选通8路模拟输入中的一路</p>\n<p>&nbsp;　（4) ALE：地址锁存允许信号，输入，高电平有效。</p>\n<p>&nbsp;　（5）START：\nA/D转换启动脉冲输入端，输入一个正脉冲（至少100ns宽）使其启动（脉冲上升沿使0809复位，下降沿启动A/D转换）。</p>\n<p>&nbsp;　（6）EOC：\nA/D转换结束信号，输出，当A/D转换结束时，此端输出一个高电平（转换期间一直为低电平）。</p>\n<p>\n&nbsp;　（7）OE：数据输出允许信号，输入，高电平有效。当A/D转换结束时，此端输入一个高电平，才能打开输出三态门，输出数字量。</p>\n<p>&nbsp;　（8）CLK：时钟脉冲输入端。要求时钟频率不高于640KHZ。</p>\n<p>&nbsp;　（9）REF（+）、REF（-）：基准电压。</p>\n<p>&nbsp;　（10）Vcc：电源，单一+5V。</p>\n<p>&nbsp;　（11）GND：地。</p>\n<p><img src=\"./imgs/553fab3bhbe0309b53045&690\" width=\"158\" name=\"image_operate_94151334821786265\" alt=\"复习要点8：采样与量化、ADC0809、DAC0832\" title=\"复习要点8：采样与量化、ADC0809、DAC0832\"></p>\n<p>2、通过ADC0809进行A/D转换输入的步骤</p>\n<p>&nbsp;&nbsp;（1）通过ADDC、ADDB、ADDA引脚选择欲进行输入转换的模拟通道（IN0~IN7），例如ADDC~A=110B为选择通道6（即IN6），通过ALE引脚加正脉冲允许0809锁存指定的通道地址（ALE=1为允许锁存）；</p>\n<p>&nbsp;&nbsp;（2）通过START引脚加正脉冲启动一次A/D转换（将通道锁存器选定的输入通道模拟信号进行A/D转换）；</p>\n<p>&nbsp;&nbsp;（3）可以通过检测EOC引脚的电平，确定本次A/D转换是否结束（忙等待）或等待一个特定时间（盲周期）以便0809当前完成转换。</p>\n<p>&nbsp;&nbsp;（4）OE引脚加高电平允许0809通过DB7~DB0输出8位转换结果。</p>\n<p>3、转换程序参见课件第4章51页</p>\n<p>&nbsp;&nbsp; <font color=\"#FF0000\"><u>其中对EOC状态检测结果进行判断的指令“JNZ NOSC”应改为“JZ\nNOSC”</u></font></p>\n<p><font color=\"#FF0000\">&#9632;</font>DAC0832</p>\n<p>1、DAC0832引脚</p>\n<p>&nbsp;&nbsp; （1）DI0~DI7：数据输入线，TLL电平。</p>\n<p>&nbsp;　（2）ILE：数据锁存允许控制信号输入线，高电平有效。</p>\n<p>&nbsp;　（3）CS：片选信号输入线，低电平有效。</p>\n<p>&nbsp;　（4）WR1：为输入寄存器的写选通信号。</p>\n<p>&nbsp;　（5）XFER：数据传送控制信号输入线，低电平有效。</p>\n<p>&nbsp;　（6）WR2：为DAC寄存器写选通输入线。</p>\n<p>&nbsp;　（7）Iout1:电流输出线。当输入全为1时Iout1最大。</p>\n<p>&nbsp;　（8）Iout2: 电流输出线。其值与Iout1之和为一常数。</p>\n<p>&nbsp;　（9）Rfb:反馈信号输入线,芯片内部有反馈电阻。</p>\n<p>&nbsp;　（10）Vcc:电源输入线 (+5v~+15v)。</p>\n<p>&nbsp;　（11）Vref:基准电压输入线 (-10v~+10v)。</p>\n<p>&nbsp;　（12）AGND:模拟地,摸拟信号和基准电源的参考地。</p>\n<p>&nbsp;&nbsp;（13）DGND:数字地，两种地线在基准电源处共地比较好。2、设有8086通过I/O端口地址300H连接DAC0832如附图所示，试编写循环程序输出图中所示正向锯齿波（设已有延时周期为锯齿波周期1/256的延时子程序DELAY可供延时调用）。</p>\n<p><img src=\"./imgs/553fab3bhbe038d747fc0&690\" width=\"369\" name=\"image_operate_43711334822609734\" alt=\"复习要点8：采样与量化、ADC0809、DAC0832\" title=\"复习要点8：采样与量化、ADC0809、DAC0832\"></p>\n<p><font color=\"#0F02FF\">&nbsp;&nbsp;答：WAVE1&nbsp;&nbsp;PROC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XOR\nAL,AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CIRL： MOV DX,300H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp;DX,AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALL DELAY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMP&nbsp;CIRL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WAVE1&nbsp;&nbsp;ENDP</font></p>"},{"title":"复习要点7：8255、8253、8251、8259&nbsp;（2）","date":"2012-04-19 11:11:55","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y9g0.html","content":"<p><font color=\"#FF0000\">&#9632;</font>8253、8251、8259</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#990030\"><u>以下题目与答案摘录自百度搜索结果，请勿与考试直接关联！</u></font></p>\n<p><strong>1、填空：</strong></p>\n<p>&nbsp;&nbsp; （1）8253 有（<u><font color=\"#042EFF\">&nbsp;&nbsp;6</font><font color=\"#4D6DF3\">&nbsp;</font></u> ）种工作方式，其中方式（<u><font color=\"#042EFF\">&nbsp;&nbsp;2</font><font color=\"#4D6DF3\">&nbsp;</font></u> ）与方式（<u><font color=\"#042EFF\">&nbsp;&nbsp;3</font><font color=\"#4D6DF3\">&nbsp;</font></u> ）能在计数结束后自动重赋初值。&nbsp;&nbsp;（2）8253每个通道的最大计数值是（<font color=\"#4D6DF3\"><u><font color=\"#042EFF\">&nbsp;65536</font></u></font> ）。</p>\n<p>\n&nbsp;&nbsp;&nbsp;（3）8251A初始化时写入（<u><font color=\"#042EFF\">&nbsp;&nbsp;方式</font><font color=\"#4D6DF3\">&nbsp;</font></u>\n）字和（<u><font color=\"#042EFF\">&nbsp;&nbsp;控制</font><font color=\"#4D6DF3\">&nbsp;</font></u> ）字。</p>\n<p>&nbsp;&nbsp;（4）串行异步通信的停止位可为（<font color=\"#042EFF\"><u>1、1.5或2</u></font>）位。</p>\n<p>&nbsp;&nbsp;（5）单片8259A最多可管理（<u><font color=\"#042EFF\">&nbsp;&nbsp;8</font><font color=\"#4D6DF3\">&nbsp;</font></u> ）个外部中断。<strong>2、问答：</strong></p>\n<p>\n&nbsp;&nbsp;&nbsp;（1）若8086系统采用单片8259A中断控制器控制中断，8259A的ICW2初始化为20H，中断源的请求线与8259A的IR4相连，试问：对应该中断源的中断向量地址是什么？若中断服务程序入口地址为4FE24H，则对应该中断源的中断向量表内容是什么？如何定位？</p>\n<p><font color=\"#042EFF\">&nbsp;&nbsp;&nbsp;答：&gt;&gt;由ICW2决定的IR0~IR7的中断类型码为20H加上IR通道序号，所以对应IR4中断的中断码等于24H。</font></p>\n<p><font color=\"#042EFF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;对应24H号中断的中断向量起始地址=中断码*4=24H*4=90H，即中断向量应存放在内存0段偏移地址为0090H~0093H的4个字节单元中。</font></p>\n<p><font color=\"#042EFF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;中断服务程序入口的物理地址4FE24H写成逻辑地址形式可为4FE2H:0004H，则0段偏移地址为0090H~0093H的4个字节单元的存放值依次为04H、00H、E2H、4FH。</font></p>\n<p>&nbsp;&nbsp;（2）某系统利用8251A与外设通信，假设8251A工作在异步方式，其传送字符格式为：1位起始位、7位数据位、采用偶校验、1位停止位，波特率为2400。该系统连续发送时每分钟可发送多少个字符？若波特率系数为16，\n则发送时钟输入端-TxC的时钟频率应为多少？</p>\n<p><font color=\"#042EFF\">&nbsp;&nbsp;答：&gt;&gt;\n发送器连续发送每分钟可发送的字符数：（2400位每秒/（1b起始位+7b数据位+1b校验位+1b停止位））*60秒=14400\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;\n-TxC的时钟频率应为波特率*波特率系数=2400*16=38400Hz</font></p>\n<p><strong>3、应用：</strong></p>\n<p>&nbsp;&nbsp;设8253占用口地址44H~47H，通道1的输出波形为方波，定时时限0.03秒。请写出8253的初始化程序（假设CLK的频率为2MHz）。</p>\n<p><font color=\"#042EFF\">&nbsp;&nbsp;&nbsp;答：已知8253口地址为44H~47H，故可知控制字地址为47H；通道0、1、2的地址分别为44H、45H、46H。要求通道1输出为方波，即工作于方式3。计数初值的计算式为\nN = 2MHz&times;0.03s = 60000 =\nEA60H&nbsp;，若采用十进制计数，60000已超过单通道的十进制计数最大值，故采用二进制计数，先送低8位、后送高8位。具体初始化指令如下：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;AL，76H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；通道1方式3，二进制16位&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp;47H，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；写入方式字（端口地址47H）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;AL，60H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；先写入初值低8位&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp;45H，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；45H为通道1端口地址&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;AL，0EAH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；后写入初值高8位\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp;45H，AL</font></p>\n<p>&nbsp;</p>"},{"title":"复习要点7：8255、8253、8251、8259&nbsp;（1）","date":"2012-04-17 08:51:14","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y7cn.html","content":"<p><font color=\"#FF0000\">&#9632;</font>8255</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#990030\"><u>以下题目与答案摘录自百度搜索结果，请勿与考试直接关联！</u></font></p>\n<p><strong>1、填空：</strong></p>\n<p>&nbsp;&nbsp;（1）若要使8255A-5的A组和B组均工作于方式0，且使端口A为输入，端口B为输出，端口C为输入，需设置控制字为（<u><font color=\"#0507FC\">10011001B</font></u>）。\n&nbsp;&nbsp;（2）当8255A的PC4~PC7全部为输出线时，表明8255A的A端口的工作方式是（<u><font color=\"#0507FC\">方式0</font></u>）。&nbsp;&nbsp;\n&nbsp;&nbsp;（3）当8255A引脚RESET信号为高电平有效时，8255A内部所有寄存器内容被（<u><font color=\"#0507FC\">清0</font></u>），同时三个连接数据端口被自动设置为（<font color=\"#0507FC\"><u>输入</u></font>）端口。&nbsp;&nbsp;（4）当8255A引脚-CS为高电平时，8255A的数据总线处于（<font color=\"#0507FC\"><u>高阻状态</u></font>）。&nbsp;&nbsp;（5）当8255A引脚-CS为低电平时，若-WR、-RD为（<font color=\"#0507FC\"><u>高电平</u></font>）时则数据引脚处于高阻状态。<strong>2、单项选择：</strong></p>\n<p>&nbsp;&nbsp;（1）对8255A-5的端口C，下列描述中，正确的是（<font color=\"#0507FC\"><u>D</u></font>）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[A].只有A、B两组均工作于方式0，且将端口C的高4位和低4位均设置为输入功能，才能用IN指令读入其各位的值。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[B].只有工作于方式1，才能用IN指令读入其各位的值。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[C].当工作于方式2时，其各位的值无法用IN指令读入。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[D].无论工作于何种方式，也无论怎样设置端口C的高4位和低4位的功能，其各位的值均可用IN指令读入。&nbsp;&nbsp;（2）关于8255A-5的工作方式设置，下列解释中，正确的是（<font color=\"#0507FC\"><u>D</u></font>）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[A].A组和B组必须设置为相同的工作方式，8255A-5才能工作。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[B].若A组和B组分别设置为不同的工作方式，则会因为C端口的高，低4位功能不一致，而导致8255A-5无法工作。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[C].当A端口工作于方式2时，B端口不能工作。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[D].A组和B组既可设置为相同的工作方式，也可设置为不同的工作方式。</p>\n<p><strong>3、多项选择：</strong></p>\n<p>&nbsp;&nbsp;（1）8255具有方式1的通道有（<font color=\"#0507FC\"><u>[a]、[b]</u></font>）。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a].通道A； [b].通道B； [c].通道C；&nbsp;&nbsp;[d].都不是；&nbsp;&nbsp;（2）8255A的工作方式字为10000001B，则工作在输出方式的有（<font color=\"#0507FC\"><u>[a]、[b]、[c]</u></font>） 。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a].A口；&nbsp;&nbsp;[b].B口；&nbsp;&nbsp;[c].C口高4位；[d].C口低4位；</p>\n<p><strong>4、编程应用：</strong>&nbsp;&nbsp;（1）假定8255A的地址为0060H～0063H，试编写下列情况的初始化程序，A组设置为方式1，且端口A作为输入，PC6和PC7作为输出，B组设置为方式1，且端口B作为输入。</p>\n<p><font color=\"#0507FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;答：&nbsp;MOV&nbsp; DX，0063H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp;AL，0B6H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp;DX，AL</font></p>\n<p><font color=\"#0507FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者：MOV\nAL，0B6H</font></p>\n<p><font color=\"#0507FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT 63H，AL</font></p>\n<p>&nbsp;&nbsp;（2）设8255端口A工作在双向方式，允许输入中断，禁止输出中断，B口工作在方式0输出，C口剩余数据线全部输入，请初始化编程。设8255端口地址为60H、62H、64H、66H。</p>\n<p><font color=\"#0507FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;答：&nbsp; MOV&nbsp; DX，0066H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; AL，0C1H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; DX，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; AL，09H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; DX，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; AL，0CH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; DX，AL</font></p>\n<p><font color=\"#0507FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者：MOV&nbsp; AL，0C1H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; 66H，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; AL，09H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; 66H，AL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOV&nbsp; AL，0CH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OUT&nbsp; 66H，AL</font></p>\n<p>&nbsp;&nbsp;（3）在8088系统上,利用8255A检测8个开关的状态, 控制16个LED灯, 已知8255A的端口地址为218H～21BH。要求:\n[1].画出8255A与开关和LED灯之间连接电路图（可用省略号）。&nbsp;</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2].分析确定8255A的方式控制字。</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3].写出8255A的初始化程序段。</p>\n<p>&nbsp;&nbsp; <font color=\"#0709FC\">答：</font></p>\n<p><font color=\"#0709FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]</font></p>\n<p><font color=\"#0709FC\">&nbsp;</font><a href=\"http://s14.sinaimg.cn/orignal/553fab3bhbdd63a7c158d\" target=\"_blank\"><font color=\"#0709FC\"><img src=\"./imgs/553fab3bhbdd63a7c158d&690\" width=\"400\" name=\"image_operate_88421334627838718\" alt=\"复习要点7：8255、8253、8251、8259&nbsp;（1）\" title=\"复习要点7：8255、8253、8251、8259&nbsp;（1）\"></font></a><font color=\"#0709FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]</font> <a href=\"http://s11.sinaimg.cn/orignal/553fab3bhbdd6416fc77a\" target=\"_blank\"><font color=\"#0709FC\"><img src=\"./imgs/553fab3bhbdd6416fc77a&690\" width=\"287\" name=\"image_operate_98411334627834390\" alt=\"复习要点7：8255、8253、8251、8259&nbsp;（1）\" title=\"复习要点7：8255、8253、8251、8259&nbsp;（1）\"></font></a></p>\n<p><font color=\"#0709FC\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3] MOV　　DX , 21BH　　　　　MOV　　AL , 90H　　　　　OUT　　DX , AL</font></p>"},{"title":"复习要点6：DB、DW伪指令与存储分配","date":"2012-04-16 21:10:33","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y74p.html","content":"<p><font color=\"#FF0000\">&#9632;</font> <font color=\"#000000\">汇编语言程序设计理解：“数据定义伪指令举例”完整的存储分配示意图</font></p>\n<p>&nbsp;&nbsp; SEGDAT&nbsp;SEGMENT AT 8000H&nbsp;&nbsp; DAT\n&nbsp;&nbsp; DB\n&nbsp;101，0F0H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入65H，F0H\n&nbsp;&nbsp; EXPR\n&nbsp;&nbsp; DB\n&nbsp;2*8+7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入17H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp; STR\n&nbsp;&nbsp;DB&nbsp;&nbsp;'Hello!'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入6个字符的ASCII码值\n&nbsp;&nbsp; AB &nbsp;&nbsp; DB &nbsp;'AB'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入41H，42H\n&nbsp;&nbsp; BA &nbsp;&nbsp; DW&nbsp; 'AB'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入42H，41H\n&nbsp;&nbsp; ABDD\n&nbsp;&nbsp; DD\n&nbsp;'AB'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入42H，41H，00，00\n&nbsp;&nbsp; OFAB\n&nbsp;&nbsp; DW\n&nbsp;AB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；存入变量AB的偏移地址\n&nbsp;&nbsp; ADRS\n&nbsp;&nbsp; DW\n&nbsp;STR，STR＋3，STR＋5&nbsp; ；存入3个偏移地址&nbsp;&nbsp;TOTAL&nbsp;&nbsp; DD\n&nbsp;DAT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；先存DAT的偏移地址，再存段地址\n&nbsp;&nbsp; SEGDAT&nbsp;ENDS</p>\n<p>以下是上述定义数据段的存储分配示意图：</p>\n<table style=\"BorDer-riGHT: medium none; BorDer-Top: medium none; BorDer-LeFT: medium none; BorDer-BoTToM: medium none; BorDer-CoLLApse: collapse; mso-border-alt: solid windowtext .5pt; mso-yfti-tbllook: 480; mso-padding-alt: 0cm 5.4pt 0cm 5.4pt; mso-border-insideh: .5pt solid windowtext; mso-border-insidev: .5pt solid windowtext\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr style=\"mso-yfti-irow: 0; mso-yfti-firstrow: yes\">\n<td>\n<p><b style=\"mso-bidi-font-weight: normal\">&nbsp; &nbsp;&nbsp;</b><b style=\"mso-bidi-font-weight: normal\">段&nbsp;</b>\n<b style=\"mso-bidi-font-weight: normal\">：</b></p>\n</td>\n<td>\n<p><b style=\"mso-bidi-font-weight: normal\">偏移</b></p>\n</td>\n<td>\n<p><b style=\"mso-bidi-font-weight: normal\">存储单元</b></p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 1\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>DAT</p>\n</td>\n<td>\n<p>65H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 2\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p></p>\n</td>\n<td>\n<p>0F0H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 3\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>EXPR</p>\n</td>\n<td>\n<p>17H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 4\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>STR</p>\n</td>\n<td>\n<p>‘H’</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 5\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>‘e’</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 6\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>‘l’</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 7\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>‘l’</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 8\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>‘o’</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 9\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>‘!'</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 10\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>AB</p>\n</td>\n<td>\n<p>41H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 11\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>42H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 12\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>BA</p>\n</td>\n<td>\n<p>42H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 13\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>41H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 14\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>ABDD</p>\n</td>\n<td>\n<p>42H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 15\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>41H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 16\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 17\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>00H</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 18\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>OFAB</p>\n</td>\n<td>\n<p>变量AB偏移属性值低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 19\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量AB偏移属性值高字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 20\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>ADRS</p>\n</td>\n<td>\n<p>变量STR偏移属性值低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 21\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量STR偏移属性值高字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 22\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量(STR偏移属性值+3)低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 23\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量(STR偏移属性值+3)高字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 24\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量(STR偏移属性值+3)低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 25\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量(STR偏移属性值+3)高字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 26\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>TOTAL</p>\n</td>\n<td>\n<p>变量DAT偏移属性值低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 27\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量DAT偏移属性值高字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 28\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量DAT段属性值低字节</p>\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 29; mso-yfti-lastrow: yes\">\n<td>\n<p>：</p>\n</td>\n<td>\n<p>&nbsp;</p>\n</td>\n<td>\n<p>变量DAT段属性值高字节</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p><font color=\"#FF0000\">&#9632;<font color=\"#000000\">汇编语言语句的第一个组成部分是名字。在指令语句中，名字是一个标号。而伪指令语句中的名字则可以是变量名、段名、过程名。</font></font></p>\n<p><font color=\"#FF0000\"><font color=\"#000000\">1、指令语句中的标号实质上是指令的符号地址。并非每条指令语句必须有标号，但如果一条指令前面有一标号，则程序中其他地方就可以引用这个标号。</font></font>标号有三种属性：段、偏移量和类型。\n&nbsp;&nbsp; (1)\n标号的段属性是定义标号在程序段的段地址。当程序中引用一个标号时，该标号的段值应在CS寄存器中。&nbsp;&nbsp; (2)\n标号的偏移量属性表示标号所在段的起始地址到定义该标号的地址之间的字节数。偏移量是一个16位无符号数。&nbsp;&nbsp; (3)\n标号的类型属性有两种：NEAR和FAR。前一种标号可以在段内被引用，地址指针为2字节；后一种标号可以在其他段被引用，地址指针为4字节。如果定义一个标号时后跟冒号，则汇编程序确认其类型为NEAR。&nbsp;</p>\n<p>\n2、与指令语句中的标号不同，伪指令语句中的名字并不总是任选的，有些伪指令规定前面必须有名字，有些则不允许有名字，也有一些伪指令的名字是任选的。即不同的伪指令对于是否有名字有不同的规定。伪指令语句的名字后面通常不跟冒号，这是它和标号的一个明显区别。很多情况下伪指令语句中的名字是变量名。变量名代表存储器中一个数据区的名字。变量也有三种属性：段、偏移量和类型。\n&nbsp;&nbsp; (1)\n变量的段属性是变量所代表的数据区所在段的段地址。由于数据区一般在存储器的数据段中，因此变量的段地址常常在DS和ES寄存器中。\n&nbsp;&nbsp; (2)\n变量的偏移量属性是该变量所在段的起始地址与变量的地址之间的字节数。&nbsp;&nbsp; (3) 变量的类型属性有BYTE(字节)、WORD(字)、\nDWORD (双字)、 QWORD\n(四字)、TBYTE(十字)等，表示数据区中存取操作对象的大小。&nbsp;</p>"},{"title":"复习要点5：数据操作数/地址操作数种类与寻址方式","date":"2012-04-15 15:00:44","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y60e.html","content":"<p><font color=\"#FF0000\"><font color=\"#FF0000\">&#9632;</font>\n<font color=\"#000000\">练习：说明如下指令操作数的类型与寻址方式，并进一步说明指令完成的功能</font></font></p>\n<p><font color=\"#000000\">1、MOV AX，4321H</font></p>\n<p><font color=\"#2C05F9\">&nbsp;&nbsp;答：操作数为数据操作数，其中源操作数为立即数操作数（寻址方式为立即数寻址），目的操作数为寄存器操作数（寻址方式为寄存器寻址），指令功能是将16位立即数4321H传送给寄存器AX。</font></p>\n<p><font color=\"#000000\">2、ADD BX，[5432H]</font></p>\n<p>&nbsp;&nbsp; <font color=\"#2C05F9\">答：</font><font color=\"#2C05F9\">操作数为数据操作数，其中源操作数为存储器操作数（寻址方式为存储器直接寻址），目的操作数为寄存器操作数（寻址方式为寄存器寻址）；指令功能是将内存DS：5432H单元存放的16位二进制数加上寄存器BX中存放的16位二进制数，结果存入寄存器BX并且影响标志寄存器的状态标志位。</font></p>\n<p><font color=\"#000000\">3、XOR WORD PTR [BP+DI],21H</font></p>\n<p>&nbsp;&nbsp; <font color=\"#2C05F9\">答：</font><font color=\"#2C05F9\">操作数为数据操作数，其中源操作数为立即数操作数（寻址方式为立即数寻址），目的操作数为存储器操作数（寻址方式为存储器基址变址寻址）；指令功能是将BP的值与DI的值求和的结果作为偏移地址，将内存SS段中对应该偏移地址的存储单元中存放的16位二进制数与立即数0021H相异或，结果存回该存储单元并且影响标志寄存器的状态标志位。</font></p>\n<p><font color=\"#000000\">4、JMP SI</font></p>\n<p>&nbsp;&nbsp; <font color=\"#2C05F9\">答：</font><font color=\"#2C05F9\">操作数为寄存器地址操作数（地址寻址方式为段内间接寻址）。指令功能是将寄存器SI中的16位二进制数传送给指令指针寄存器IP从而实现段内间接转移。</font></p>\n<p><font color=\"#000000\">5、CALL FAR PTR [BP]</font></p>\n<p>&nbsp;&nbsp; <font color=\"#2C05F9\">答：</font><font color=\"#2C05F9\">操作数为存储器地址操作数（地址寻址方式为段间间接寻址）。指令功能是先分别将CS、IP的值依次压入堆栈，然后将SS：BP所指内存单元中的32位二进制数的高16位传给CS、低16位传给IP从而实现段间间接方式的过程调用。</font></p>\n<p><font color=\"#000000\">6、LEA BX，[BP+DI]</font></p>\n<p>&nbsp;&nbsp; <font color=\"#2C05F9\">答：</font><font color=\"#2C05F9\">操作数为数据操作数，其中源操作数为存储器操作数（寻址方式为存储器基址变址寻址），目的操作数为寄存器操作数（寻址方式为寄存器寻址）；指令功能是求取源操作数的有效地址（即是将BP的值与DI的值求和，结果作为16位偏移地址（即源操作数的有效地址））传送给目的寄存器BX。</font></p>\n<p><font color=\"#FF0000\">&#9632;</font> 操作数</p>\n<p>\n1、8086/8088指令系统采用了一种灵活的、由1～6个字节组成的变字长的指令格式，包括操作码、寻址方式以及操作数三个部分。操作数具体可分为数据操作数和地址操作数两种。</p>\n<p>\n2、数据操作数是是与数据有关的操作数，即指令中操作的对象是数据。数据操作数又可分为：&nbsp;&nbsp;&nbsp;(1)&nbsp;立即数操作数：指令中要操作的数据包含在指令中。&nbsp;\n&nbsp;&nbsp;&nbsp;(2)&nbsp;寄存器操作数：指令中要操作的数据存放在指定的寄存器中。&nbsp;\n&nbsp;&nbsp;&nbsp;(3)&nbsp;存储器操作数：指令中要操作的数据存放在指定的存储单元中。&nbsp;\n&nbsp;&nbsp;&nbsp;(4) I/O\n操作数：指令中要操作的数据来自或送到I/O 端口。&nbsp;3、对于数据操作数，有的指令有两个操作数：一个称为源操作数，在操作过程中其值不改变；另一个称为目的操作数，操作后一般被操作结果代替。有的指令只有一个操作数，或没有(或隐含)操作数。</p>\n<p>4、地址操作数是与程序转移地址有关的操作数，即指令中操作的对象不是数据，而是要转移的目标地址。地址操作数可以分为：&nbsp;&nbsp; （1）立即数操作数：转移的目标地址包含在指令中。&nbsp;&nbsp;（2）寄存器操作数：转移的目标地址存放在寄存器中。&nbsp;&nbsp;（3）存储器操作数：转移的目标地址存放在存储单元之中。<font color=\"#FF0000\">&#9632;</font> 寻址方式</p>\n<p>\n1、寻址方式就是指指令中给出的寻找操作数的方法。根据操作数的种类，8086/8088指令系统的寻址方式分为两大类：数据寻址方式（寻找数据操作数的方法）和地址寻址方式（寻找地址操作数的方法）。\n2、数据寻址方式具体分为四种类型：&nbsp;&nbsp;（1）立即数寻址方式：所提供的操作数直接包含在指令中，紧跟在操作码之后，它作为指令的一部分，这种操作数称为立即数。&nbsp;&nbsp;（2）寄存器寻址方式：操作数存放在指令规定的寄存器中，寄存器的名字在指令中指出。&nbsp;&nbsp;（3）存储器寻址方式：操作数存放在存储单元中，而操作数在存储器中的物理地址是由段地址左移4位与操作数在段内的偏移地址相加得到的。具体包括存储器的直接寻址、寄存器间接寻址、寄存器相对寻址、基址变址寻址和基址变址相对寻址等5种。\n&nbsp;&nbsp;（4）I/O端口寻址方式：分为端口直接寻址（地址用8位立即数(0~255)表示）和端口间接寻址（当I/O端口地址大于0FFH时，必须事先将端口地址存放在DX寄存器中）两种。\n3、地址寻址方式具体分为四种类型：&nbsp;&nbsp; （1）段内直接寻址方式&nbsp;&nbsp; （2）段内间接寻址方式&nbsp;&nbsp; （3）段间直接寻址方式&nbsp;&nbsp; （4）段间间接寻址方式</p>"},{"title":"复习要点4：寄存器功用与指令功能(3)","date":"2012-04-15 10:37:59","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y5x7.html","content":"<p><font color=\"#FF0000\">&#9632;</font> 地址相关指令</p>\n<p><font color=\"#ED1C24\">1</font>、JMP：分为段内直接短转移、段内直接（近）转移、段内间接转移、段间直接转移、段间间接转移等5种。</p>\n<p>&nbsp;&nbsp;（1）直接转移：汇编程序在将汇编语言翻译成目标码时根据JMP指令后跟标号类型（近标号、远标号）或立即地址的形式<font color=\"#ED1C24\">（</font>近地址（只有偏移地址如\"JMP 4321H\"）、远地址（完整逻辑地址如\"JMP\n8765H:4321H\"且当前代码段值不为8765H，或者用\"FAR PTR\"指定如\"JMP FAR PTR 4321H\")\n<font color=\"#ED1C24\">）</font>自动将其对应成段内转移或段间转移。</p>\n<p>&nbsp;&nbsp; （2）间接转移：<font color=\"#2F3699\">段内间接转移指令</font>的操作数是一个16位的通用寄存器或一个存放16位数地址的存储器。存储器可用各种寻址方式。指令的操作是用指定的寄存器或存储器中的内容取代当前IP的值，以实现程序的转移。例如：\"JMP\nAX\"、\"JMP WORD PTR [BX]\"等；<font color=\"#2F3699\">段间间接转移指令</font>的操作数是一个32位地址的存储器，指令的操作是将32位存储器数的前两个字节送给IP，后两个字节送给CS，以实现到另一个代码段的转移。例如：\"JMP\nFAR PTR [DI]\"等。注意：段间间接转移指令的操作数不能是寄存器（因为单个寄存器无法存放用于段间转移的32位地址）。</p>\n<p>&nbsp;&nbsp;（3）对于段内直接转移，如果本条JMP指令的下一条指令到目标地址之间的相对位移量在-128~+127的范围内，则可在标号前写上运算符SHORT，实现段内直接短转移。短转移就是应用短地址（1字节相对地址）实现转移范围在-128~+127范围内的段内直接转移。</p>\n<p><font color=\"#ED1C24\">2</font>、CALL：分为段内直接（近）调用、段内间接调用、段间直接调用、段间间接调用等4种。CALL指令先执行入栈操作（段内调用仅入栈IP，段间调用先入栈CS、再入栈IP），然后执行与类似JMP指令相同的转移操作。没有类似JMP短转移的所谓CALL短调用。</p>\n<p><font color=\"#ED1C24\">3</font>、J<font color=\"#4D6DF3\">cc</font>：依据对标志寄存器的某一位或若干位组合值的判断决定是否进行段内直接转移。条件转移都是短转移。</p>\n<p><font color=\"#ED1C24\">4</font>、LOOP：先将CX的内容减１，如果结果不等于零，则转到指令中指定的地址，为短转移。</p>\n<p><font color=\"#ED1C24\">5</font>、JCXZ：判断CX的值是否为零以决定是否转移，为短转移。</p>\n<p><font color=\"#ED1C24\">6</font>、LEA：指令的目的操作数必须是一个16位通用寄存器，源操作数必须是一个存储器操作数，指令的执行结果是把源操作数的有效地址，即16位偏移地址传送到目标寄存器。</p>\n<p><font color=\"#ED1C24\">7</font>、LDS：传送一个32位的远地址指针，其中包括一个偏移地址和一个段地址，把偏移地址送指令中指定的寄存器(目的操作数)，把段地址送数据段寄存器DS。例如\"LDS&nbsp;SI，[0010H]\"，若设当前(DS)=C000H，而有关存储单元的内容为(C0010H)=80H，(C0011H)=01H，(C0012H)=00H，(C0013H)=20H，则执行该指令后，SI寄存器的内容为0180H，段寄存器DS的内容为2000H。</p>\n<p><font color=\"#ED1C24\">8</font>、LES：传送一个32位的远地址指针，其中包括一个偏移地址和一个段地址，把偏移地址送指令中指定的寄存器(目的操作数)，把段地址送数据段寄存器ES。</p>\n<p>&nbsp;</p>\n<p><font style=\"FonT-siZe: 18px\" color=\"#990030\"><u>以下文字根据Tracy\nMcgrady博客专栏内容整理，请参考！</u></font></p>\n<p><font color=\"#FF0000\">&#9632;</font>修改IP，或同时修改CS和IP的指令称为转移指令。只修改IP时，称段内转移，段内转移又分为短转移和近转移，是根据IP修改范围不同而区分的，短转移修改IP范围为-128~127，近转移修改IP范围为-32768~32767。同时修改CS和IP时，称段间转移，也称远转移。</p>\n<p><font color=\"#ED1C24\">1</font>、jmp为无条件转移指令，可以修改IP，也可以同时修改CS和IP。</p>\n<p>&nbsp;&nbsp; (1) jmp short\n标号，段内短转移，short说明指令进行的是短转移。&nbsp;&nbsp; (2) jmp near ptr\n标号，段内近转移。&nbsp;&nbsp; <font color=\"#0718FC\">注：前两个转移在机器指令中并不给出转移的目的地址，而是给出转移的相对位移，由编译器计算出。</font></p>\n<p>&nbsp;&nbsp; (3) jmp far ptr\n标号，段间转移，指令执行后，CS=标号所在段的段地址，IP=标号所在段的偏移地址。</p>\n<p>&nbsp;&nbsp; 转移地址在寄存器中：&nbsp;&nbsp; (4)jmp\n16位寄存器，指令执行后，IP=16位寄存器值。</p>\n<p>&nbsp;&nbsp; 转移地址在内存中：&nbsp;&nbsp; (5) jmp word ptr\n内存单元地址，为段内转移。&nbsp;&nbsp; (6) jmp dword ptr\n内存单元地址，为段间转移，高地址字为转移目的段地址，低地址字为转移目的偏移地址。</p>\n<p><font color=\"#ED1C24\">2</font>、jcxz为有条件转移指令，所有有条件指令都为段内短转移，编译后在机器指令中只给出转移的偏移。\n&nbsp;&nbsp; jcxz 标号，如果cx=0，则跳到标号处执行。</p>\n<p><font color=\"#ED1C24\">3</font>、loop\n标号，为循环指令，所有循环指令都为段内短转移，编译后在机器指令中只给出转移的偏移。</p>\n<p><font color=\"#ED1C24\">4</font>、 call和ret指令也是转移指令，主要用于子程序设计。</p>\n<p>&nbsp;&nbsp; (1)\nret，近转移，使用栈中的数据，修改IP值，相当于\"pop IP\"。&nbsp;&nbsp; (2)\nretf，远转移，使用栈中数据，修改CS和IP值，相当于先\"pop IP\"、再\"pop CS\"。</p>\n<p>&nbsp;&nbsp;call不能实现短转移，它将当前的IP或CS和IP压入栈中，再转移，转移原理同jmp相同。&nbsp;&nbsp; (3) call\n标号(16位位移)，将当前IP压入栈中，转移到标号处执行，相当于先\"push IP\"、再\"jmp near ptr\n标号\"。&nbsp;&nbsp; (4) call far ptr\n标号，段间转移，将CS和IP压入栈中，转移到标号处执行，相当于\"push CS\"、再\"push IP\"、然后\"jmp far ptr\n标号\"&nbsp;&nbsp; (5) call 16位寄存器，相当于先\"push\nIP\"、再\"jmp 16位寄存器\"。&nbsp;&nbsp; (6) call word ptr\n内存单元地址，相当于先\"push IP\"、再\"jmp word ptr内存单元地址\"。&nbsp;&nbsp; (7) call dword\nptr内存单元地址，相当于先\"push CS\"、再\"push IP\"、然后\"jmp dword ptr 内存单元地址\"。</p>"},{"title":"复习要点4：寄存器功用与指令功能(2)","date":"2012-04-13 11:30:27","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y4e0.html","content":"<p><font color=\"#FF0000\">&#9632;</font> 错误指令示例</p>\n<p><font color=\"#990030\">1、MOV\nDS，1234H</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>&nbsp;&nbsp;；没有将立即数直接传送给段寄存器的指令，一般应使用如下类似的两条指令相配合才能完成此功能。</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;MOV AX，1234H&nbsp; ；先将立即数传送给某个通用16位寄存器</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;MOV\nDS，AX&nbsp;&nbsp;&nbsp;&nbsp;；再通过通用寄存器转送给目标段寄存器</p>\n<p><font color=\"#990030\">2、MOV AL，123H</font></p>\n<p>&nbsp;&nbsp; ；123H超出了AL所能存储数据的范围</p>\n<p><font color=\"#990030\">3、ADD AX，BL</font></p>\n<p>&nbsp;&nbsp; ；源操作数与目的操作数类型不一致</p>\n<p><font color=\"#990030\">4、INC [BX]</font></p>\n<p>&nbsp;&nbsp; ；操作数类型不明确，应改成：</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;INC BYTE PTR [BX]&nbsp;&nbsp;；对8位字节数据加1</p>\n<p>&nbsp;&nbsp; ；或</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;INC&nbsp;WORD PTR\n[BX]&nbsp;&nbsp; ；对16位字数据加1</p>\n<p><font color=\"#990030\">5、POP CS</font></p>\n<p>&nbsp;&nbsp;；CS的值只允许通过跳转、调用或中断操作等间接修改</p>\n<p><font color=\"#FF0000\">&#9632;</font> 堆栈相关指令</p>\n<p>1、PUSH：（源）操作数可以是所有16位通用寄存器和16位段寄存器，也可以是由某种寻址方式所指示的存储单元（例如\"PUSH\n[BX]\"、\"PUSH [4488H]\"等)；</p>\n<p>2、POP：（目的）操作数可以是所有16位通用寄存器和除CS以外的16位段寄存器（例如\"POP SP\"、\"POP\nSS\"都是允许的），或者是由某种寻址方式所指示的存储单元。</p>\n<p>3、PUSHF、POPF</p>\n<p>4、CALL：过程调用指令，具体可分为段内直接调用、段内间接调用、段间直接调用、段间间接调用等四种。</p>\n<p>&nbsp;&nbsp;（1）段内直接调用：指令中保存CALL的下一条指令与被调用的过程入口地址之间的<font color=\"#4D6DF3\">16位相对位移量</font>，相对位移量的范围为-32768 ~\n+32767，占2个字节。指令的操作是将IP压入堆栈，然后将指令中保存的相对位移量加到IP上，从而使程序转移到被调用的过程处执行。本指令执行前后SP的值减小2。</p>\n<p>&nbsp;&nbsp;（2）段内间接调用：指令的操作数是一个16位的寄存器或存储器，其中的内容是一个近过程的入口地址。本指令将IP寄存器压入堆栈，然后将寄存器或存储器的内容传送到IP。本指令执行前后SP的值减小2。</p>\n<p>&nbsp;&nbsp;（3）段间直接调用：先将CS中的段地址压入堆栈，并将调用过程（为远过程）所在段的段地址送CS；再将IP中的偏移地址压入堆栈，然后将调用过程的偏移地址送IP。本指令执行前后SP的值减小4。</p>\n<p>&nbsp;&nbsp;（4）段间间接调用：指令的操作数是一个32位的存储器地址，指令的操作是先将CS压入堆栈，并将存储器操作数的后两个字节送CS；再将IP压入堆栈，然后将存储器操作数的前两个字节送IP。本指令执行前后SP的值减小4。</p>\n<p>\n5、RET：过程返回指令，具体分为近返回和远返回两种。汇编程序在将汇编语言翻译成目标码时根据RET指令所在过程的类型（近过程/远过程）自动将其对应成近返回或远返回。在反汇编目标代码时，为区别近返回和远返回，特别将远返回标记为\"RETF\"而使\"RET\"仅对应近返回。</p>\n<p>&nbsp;&nbsp; （1）RET指令执行前后SP的值增大2。</p>\n<p>&nbsp;&nbsp; （2）RETF指令执行前后SP的值增大4。</p>\n<p>&nbsp;&nbsp;（3）RET/RETF指令还允许带一个弹出值，这是一个范围为0～64\nK的立即数，通常是偶数。弹出值表示执行完正常返回指令的出栈操作后从堆栈中另外舍弃数据的字节数（即SP的额外增加值）。</p>\n<p>6、INT：（软件）中断指令。可以用\"INT\nn\"（n~255）指令来产生软件中断，指令的操作数n给出了中断类型号，CPU执行\"INT\nn\"指令后，会立即产生一个类型号为n的中断（即先将当前标志寄存器、CS和IP的值依次压入堆栈，然后转入相应的中断处理程序）来完成中断功能。本指令执行前后SP的值减小6。</p>\n<p>\n7、IRET：中断返回指令。从当前堆栈顶部依次弹出3个16位数到IP、CS和标志寄存器（即INT指令入栈操作的反过程）。本指令执行前后SP的值增大6。&nbsp;</p>"},{"title":"复习要点4：寄存器功用与指令功能(1)","date":"2012-04-11 21:52:22","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y39a.html","content":"<p><font color=\"#FF0000\">&#9632;</font>\n8x16位通用寄存器：4个16位数据寄存器（AX、BX、CX、DX）和4个16位指针与变址寄存器（SP、BP与SI、DI）</p>\n<p>\n（1）AX：可分为AH（高字节）和AL（低字节）两个8位寄存器，所有的I/O指令都使用AX或AL与外设端口交换信息；乘除法指令隐含用到AX；支持寄存器（直接）寻址。</p>\n<p>\n（2）BX：可分为BH和BL两个8位寄存器，进行存储器操作数寻址时可用BX存放操作数在内存中数据段内的偏移地址（称为基址指针，且默认段寄存器为DS），可支持支持寄存器（直接）寻址，寄存器间接寻址，寄存器相对寻址，或与SI、DI配合支持基址变址寻址以及基址变址相对寻址；</p>\n<p>\n（3）CX：可分为CH和CL两个8位寄存器，LOOP指令隐含用到CX，JCXZ指令判断CX的值是否为零以决定是否转移，移位指令可用CL指示移位位数；支持寄存器（直接）寻址。</p>\n<p>\n（4）DX：可分为DH和DL两个8位寄存器，在寄存器间接寻址的I/O指令中存放I/O端口地址；在做双字长乘除法运算时，DX与AX一起存放一个双字长操作数，其中DX存放高16位数；支持寄存器（直接）寻址。</p>\n<p>\n（5）SP：堆栈指针，总是指向栈顶（其值为栈顶字节单元在SS段内的偏移地址）。由于堆栈相关操作总是以16位二进制数为单位进行，所以对8086CPU来说SP的初始值应为偶数（偶地址使得8086CPU存取16位数据可以在一个总线访问周期内完成），且每次入栈/出栈操作SP的值分别减2和加2；支持寄存器（直接）寻址。</p>\n<p>\n（6）BP：也称为基址指针，用于进行存储器操作数寻址时存放操作数的偏移地址，但默认段寄存器为SS；可支持支持寄存器（直接）寻址，寄存器相对寻址，或与SI、DI配合支持基址变址寻址以及基址变址相对寻址（各种BP相关的存储器寻址方式中，其默认段寄存器均为SS）。<u><font color=\"#0C1EFE\">BP不支持寄存器间接寻址（例如\"MOV\nAX，[BP]\"实际上是用\"MOV AX，[BP+0]\"表达的，可以认为前者是后者的简写，即便写成\"MOV\nAX，[BP]\"其指令长度也比类似的\"MOV AX，[BX]\"指令的长度多一个字节。\"MOV AX，[BP]\"同\"MOV\nAX，[BP+1]\"和\"MOV AX，[BX+1]\"一样都是3字节指令，而\"MOV\nAX，[BX]\"为2字节指令）</font>。</u></p>\n<p>\n（7）SI：（源）变址寄存器，通常用在字符串操作（对应字符串操作指令）时存放源串在数据段DS内的偏移地址；可支持支持寄存器（直接）寻址，寄存器相对寻址，或与BX、BP配合支持基址变址寻址以及基址变址相对寻址。</p>\n<p>\n（8）DI：（目的）变址寄存器，通常用在字符串操作（对应字符串操作指令）时存放目的串在附加数据段ES内的偏移地址；非字符串操作时，默认段寄存器为DS，可支持支持寄存器（直接）寻址，寄存器相对寻址，或与BX、BP配合支持基址变址寻址以及基址变址相对寻址。</p>\n<p><font color=\"#FF0000\">&#9632;</font>&nbsp;指令指针寄存器IP</p>\n<p>\n（1）IP用来存放下一条要读取的指令在代码段中的偏移地址。IP在程序运行中能自动加1修正，从而使其始终存放的是下一条要读取的指令在代码段的偏移地址。\n（2）由于CS和IP的内容决定了程序的执行顺序，因此程序员不能直接用赋值指令对其内容进行修改。（3）有些指令能使IP和CS的值改变（如跳转指令）或使其值压入堆栈或从堆栈中弹出恢复原值（如子程序调用指令和返回指令）</p>\n<p><font color=\"#FF0000\">&#9632;</font>&nbsp;标志寄存器FLAGS</p>\n<p>（1）FLAGS为一个16位的寄存器，但只用了其中9位，包括6个状态标志位，3个控制标志位。（2）状态标志位：用来反映算术和逻辑运算结果的一些特征。如结果是否为“0”，是否有进位、借位、溢出等。不同指令对状态标志位的影响是不同的。<font color=\"#0406FB\"><u>特别指出：作为逻辑运算指令之一NOT指令不影响标志位</u></font>。</p>\n<p>&nbsp;&nbsp;&nbsp;&#9312;\n进位标志位CF。当进行加减运算时，若最高位发生进位或借位则CF为1，否则为0。通常用于判断无符号数运算结果是否超出了计算机所能表示的无符号数的范围；在移位操作中通常用来保存最后的移出位；在逻辑运算后会将CF清零；也有单独的CF清零/置位/取反指令CLI/STI/CMC。需要特别注意的是，INC、DEC指令不影响CF标志。JC、JNC指令根据当前CF标志的值决定是否转移（JB/JNAE与JC是同一条指令的不同助记形式，JAE/JNB与JNC是同一条指令的不同助记形式），另有JA/JNBE、JBE/JNA指令也用到了CF标志。</p>\n<p>&nbsp;&nbsp; &#9313;\n奇偶标志位PF。当指令执行结果的低8位中含有偶数个1时，PF为1，否则为0。JP/JPE、JNP/JPO指令根据当前PF标志的值决定是否转移。</p>\n<p>&nbsp;&nbsp; &#9314;\n辅助进位标志位AF。当执行一条加法或减法运算指令时，若结果的低字节的低4位向高4位有进位或借位，则AF为1，否则为0。BCD码运算调整指令隐含使用AF及其它相关标志位调整BCD码算术运算结果。</p>\n<p>&nbsp;&nbsp; <font style=\"FonT-siZe: 14px\">&#9315;\n零标志位ZF。若当前</font>的（算术、逻辑、移位等）运算的结果为0，则ZF为1，否则为0。JZ/JE、JNZ/JNE指令根据当前ZF标志的值决定是否转移，另有JA/JNBE、JBE/JNA、JG/JNLE、JL/JNGE、JLE/JNG指令也用到了ZF标志。</p>\n<p>&nbsp;&nbsp; &#9316;\n符号标志位SF。当前的（算术、逻辑、移位等）运算结果的最高位为1时，SF=1，否则为0。JS、JNS指令根据当前SF标志的值决定是否转移。JG/JNLE、JGE/JNL、JL/JNGE、JLE/JNG等有符号数判断指令也用到了SF标志。</p>\n<p><font size=\"+0\"><font style=\"FonT-siZe: 14px\"><font style=\"FonT-siZe: 14px\">&nbsp;&nbsp;<font style=\"FonT-siZe: 14px\">&#9317; 溢出标志位OF。</font><font style=\"FonT-siZe: 14px\" size=\"3\">当前的（算术、移位等）运算结果</font>超出了带符号数所能表示的数值范围，即溢出时，OF=1，否则为0；用来判断带符号数运算结果是否溢出。在逻辑运算后会将OF清零。JO、JNO指令根据当前OF标志的值决定是否转移，JG/JNLE、JGE/JNL、JL/JNGE、JLE/JNG等有符号数判断指令也用到了OF标志。</font>\n（3）控制标志位：用来控制CPU的操作，由程序设置或清除。</font></font></p>\n<p>&nbsp;&nbsp;&nbsp;&#9312;\n单步（陷阱）标志位TF。是为测试程序的方便而设置的。若将TF置1，8086/8088CPU处于单步工作方式，否则，将正常执行程序。没有单独的TF清零/置位指令。\n&nbsp;&nbsp;&#9313;&nbsp;中断允许标志位IF。是用来控制可屏蔽中断的控制标志位。IF=1，表示允许CPU接受外部从INTR引脚上发来的可屏蔽中断请求信号；若IF=0，则禁止CPU接受可屏蔽中断请求信号。IF的状态对非屏蔽中断及内部中断的响应没有影响。有单独的IF清零/置位指令CLI/STI。\n&nbsp;&nbsp; &#9314;\n方向标志位DF。DF=1，串操作按减地址方式进行，即从高地址开始，每操作一次地址自动递减；若DF=0，则串操作按增地址方式进行，即每操作一次地址自动递增。有单独的DF清零/置位指令CLD/STD。</p>\n<p><font color=\"#FF0000\">&#9632;</font>&nbsp;段寄存器</p>\n<p>\n（1）代码段寄存器CS存储程序当前使用的代码段的段地址。代码段用来存放程序的指令代码。下一条要读取指令在代码段中的偏移地址由指令指针寄存器IP提供；\n（2）数据段寄存器DS用来存放程序当前使用的数据段的段地址。一般来说，程序中所用到的原始数据、中间结果以及最终结果都存放在数据段中，如果程序中使用了字符串处理指令，则源字符串也存放在数据段中；\n（3）堆栈段寄存器SS用来存放程序当前所使用的堆栈段的段地址。堆栈是在存储器中开辟的一个特定区域；（4）附加数据段寄存器ES用来存放程序当前使用的附加数据段的段地址。附加数据段通常用于存放字符串操作时的目的字符串。</p>\n<p><font color=\"#FF0000\">&#9632;</font>&nbsp;寄存器在指令中的使用</p>\n<p>（1）所有通用寄存器可以出现在符合寻址要求的指令中（传送类、算术类、逻辑类、移位类、甚至转移类指令），例如：\"MOV\nBX，[BX+SI]\"、\"JMP SP\"、\"CALL [BP+DI]\"等；</p>\n<p>（2）段寄存器只能出现在合理的MOV、PUSH和POP指令中，例如：\"MOV DS，SP\"、\"PUSH SS\"、\"POP\nES\"等；</p>\n<p>\n（3）指令指针寄存器IP不出现在任何指令中。不能直接用赋值指令对IP内容进行修改。程序顺序执行时IP随取指过程自动加1，非顺序执行时按相应的转移、子程序调用或中断调用、子程序返回或中断返回操作结果修改IP。</p>\n<p>\n（4）标志寄存器FLAGS也不直接出现在指令中。除了相应标志位可单独位操作、或受绝大部分算术、逻辑、移位运算的影响、或被条件转移指令引用外，还有LAHF、SAHF、POPF、PUSHF指令会隐含访问标志寄存器。</p>"},{"title":"复习要点3：ASCII码与BCD码、无符号数与有符号数","date":"2012-04-10 21:12:04","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y267.html","content":"<p><font style=\"FonT-siZe: 14px\"><font color=\"#990030\" style=\"FonT-siZe: 18px\"><u>以下问题根据课堂辅导内容整理，请勿与考试直接关联！</u></font></font></p>\n<p><font color=\"#FF2606\">&#9632;</font><font color=\"#000000\"><strong>练习1：</strong></font><strong>试编写子程序求取AX寄存器和BX寄存器中两个有符号二进制数的绝对值的和到BX寄存器中。</strong>\n<font color=\"#4D6DF3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ABS&nbsp;&nbsp; PROC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR AX,AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNS NXT1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NEG AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NXT1: OR BX,BX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNS NXT2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#FF0000\">NEG BX</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NXT2:\nADD BX,AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ABS&nbsp;&nbsp;ENDP</font></p>\n<p><font color=\"#FF2606\">&#9632;</font><strong>练习2：</strong><strong>试编写子程序求取AX寄存器和BX寄存器中两个有符号二进制数的和的绝对值到BX寄存器中。</strong>\n<font color=\"#4D6DF3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ABS&nbsp;&nbsp; PROC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD BX,AX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#FF0000\">OR BX,BX</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNS NXT1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#FF0000\">NEG BX</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NXT1:&nbsp;RET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ABS&nbsp;&nbsp;ENDP</font></p>\n<p>&nbsp;</p>\n<p><font color=\"#990030\" style=\"FonT-siZe: 18px\"><u>以下问题根据百度问答内容整理，请勿与考试直接关联！</u></font></p>\n<p><font color=\"#FF2606\">&#9632;</font><strong>百度问题1：“将一字节压缩BCD码转换成两个ASCII字符”</strong></p>\n<p>问：老师以96H为例讲解时说，”把96拆开，把9变成39，把6变成36，不就变成ASC码的数了吗、?\",听不懂这句话什么意思。为什么这样就变成ASC码了？</p>\n<p><font color=\"#4D6DF3\">答：ASC码是一种字符编码，它是用7位二进制来表示数字、字符及一些控制符号，其规律是0的ASC码是30H,9的ASC码是39H，压缩的BCD\n码是一个字节表示2位BCD码,就如题中的9和6构成的96H，即为2位BCD码，把9的BCD码转换成ASC码即为39H,6的BCD码转换成ASC码即为36H。</font></p>\n<p><font color=\"#FF2606\">&#9632;</font><strong>百度问题2：“1字节二进制数转换成3位非压缩型的BCD码”</strong></p>\n<p>问：请问汇编中如何将一个字节的二进制数转换成3位非压缩型的BCD码？</p>\n<p><font color=\"#4D6DF3\">答：方法是求出百位、十位、个位，然后分别存到三个单元中就行了。&nbsp;&nbsp;&nbsp;设该二进制数放在AX中。最后结果放到地址为0000H，0001H，0002H的单元中。</font></p>\n<p><font color=\"#4D6DF3\">&nbsp;&nbsp;&nbsp;MOV&nbsp; BL, 64H&nbsp;&nbsp;&nbsp;DIV&nbsp;&nbsp;BL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;除以100，商是百位存在AL中，余数在AH中&nbsp;&nbsp;&nbsp;MOV&nbsp; [0000H], AL&nbsp;;保存百位&nbsp;&nbsp;&nbsp;MOV&nbsp; AL,\nAH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;保存余数\n&nbsp;&nbsp;&nbsp;MOV&nbsp; AH,\n00H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;MOV&nbsp; BL, 0AH&nbsp;&nbsp;&nbsp;DIV&nbsp;&nbsp;BL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;余数除以10\n&nbsp;&nbsp;&nbsp;MOV&nbsp; [0001H], AL&nbsp;;所得的商为十位&nbsp;&nbsp;&nbsp;MOV&nbsp; [0002H],\nAH&nbsp;;余数为个位</font></p>\n<p><font color=\"#FF2606\">&#9632;</font><strong>百度问题3：“求32位有符号数的绝对值”</strong></p>\n<p>问：如何用汇编语言编把DX AX中放的32位有符号二进制数求绝对值并送入CX\nBX之中（DX、CX放高位字节）</p>\n<p><font color=\"#4D6DF3\">答：</font></p>\n<p><font color=\"#4D6DF3\">&nbsp; &nbsp; TEST\nDX, 8000H &nbsp; ;判断正负数&nbsp; &nbsp; JZ NXT &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ;正数，直接保存&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;负数，取反加1&nbsp; &nbsp; NOT AX &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ;取反&nbsp; &nbsp; NOT DX &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; ;取反&nbsp; &nbsp; ADD AX, 1 &nbsp;&nbsp; &nbsp;&nbsp;;低位字加1&nbsp; &nbsp; ADC DX, 0 &nbsp;&nbsp; &nbsp;&nbsp;;高位字带进位加0NXT:MOV BX, AX &nbsp; &nbsp;&nbsp; ;低位字送BX保存&nbsp; &nbsp; MOV CX, DX &nbsp;&nbsp; &nbsp;;高位字送CX保存</font></p>\n<p>&nbsp;</p>"},{"title":"","date":"","cate":"","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y1sa.html","content":"很抱歉,该文章已经被加密!"},{"title":"复习要点1：8086/8088构成与重点引脚功能","date":"2012-04-10 13:44:21","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100y1pl.html","content":"<p><font color=\"#FF0000\">&#9632;</font>看图理解：CPU构成</p>\n<p>1、8086CPU=EU+BIU</p>\n<p>2、EU=ALU+FLAGS+数据暂存寄存器+通用寄存器组+EU控制电路</p>\n<p>\n3、BIU=4x16位段寄存器+IP+20位地址加法器+指令队列缓冲器(6字节/4字节)+与EU通讯的内部寄存器+总线控制电路</p>\n<p><img src=\"./imgs/553fab3bhbd4ca421ea02&690\" alt=\"复习要点1：8086/8088构成与重点引脚功能\" title=\"复习要点1：8086/8088构成与重点引脚功能\"></p>\n<p><font color=\"#FF0000\">&#9632;</font>可以对应记忆的重点引脚</p>\n<p>1、NMI与INTR</p>\n<p>2、INTR与-INTA</p>\n<p>3、-WR与-RD</p>\n<p><font color=\"#FF0000\">&#9632;</font>结合指令理解重点引脚</p>\n<p>1、-WR 与“MOV\n存储器，寄存器”、“PUSH”、“OUT”指令</p>\n<p>2、-RD 与“MOV 寄存器，存储器”、“POP”、“IN”指令</p>\n<p>3、M/-IO（或IO/-M）与\n“MOV”等存储器相关指令和I/O指令(“IN”/“OUT”)</p>\n<p><font color=\"#FF0000\">&#9632;</font>结合总线时序理解重点引脚</p>\n<p>0、标准总线周期包含4个T周期（状态周期T1~T4）</p>\n<p>1、ALE在T1周期有效，-WR与-RD在T2~T4周期有效，ALE先于-WR与-RD有效以便首先从AD15~AD0中分离出A15~A0；</p>\n<p>2、M/-IO 在整个总线周期均有效（=0或1并保持不变）用以确定当前总线周期为存储器访问还是I/O端口访问；</p>\n<p>3、M/-IO -WR -RD</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;&nbsp; 存储器写访问</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;&nbsp; 存储器读访问</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;&nbsp; I/O端口写访问</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;&nbsp; I/O端口读访问</p>\n<p><font color=\"#FF0000\">&#9632;</font>RESET信号对CPU内部寄存器及指令队列的影响</p>\n<table width=\"259\" height=\"222\" dir=\"ltr\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">标志寄存器</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">IP</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">CS</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">FFFFH</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">DS</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">SS</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">ES</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">指令队列缓冲器</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">空</font></div>\n</td>\n</tr>\n<tr>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">其余寄存器</font></div>\n</td>\n<td>\n<div style=\"mso-char-wrap: 1; mso-kinsoku-overflow: 1\"><font style=\"FonT-siZe: 12px\">0000H</font></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p><font color=\"#FF0000\">&#9632;</font><font color=\"#000000\">百度上的问题与答案：</font>请问8086CPU控制信号-RD、-WR、M/-IO、ALE的功能</p>\n<p>答：</p>\n<p>\n1、-RD，读信号引脚（输出），执行一个对内存或I/O端口的读操作，到底是读取内存中的单元数据还是I/O端口中的数据，取决于M/-IO信号。\n2、-WR，写信号（输出），低电平有效，对存储器或I/O写操作，具体哪种操作取决于M/-IO信号。3、M/-IO，存储器/输入/输出控制信号（输出）若此信号为高电平，表示CPU和存储器之间进行数据传输；若为低电平，表示CPU和输入输出设备之间进行数据传输。\n4、ALE，地址锁存允许信号（输出），高电平有效，不能被浮空。</p>"},{"title":"微机与控制复习要点C","date":"2012-04-05 22:11:42","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xy0q.html","content":"<p>&nbsp;</p>\n<p>\n<b><u>复习要点</u></b><b><u>C</u></b></p>\n<p>&nbsp;</p>\n<p>1、&nbsp;8086/8088构成与重点引脚功能；</p>\n<p>&nbsp;</p>\n<p>2、&nbsp;中断与中断向量、硬件中断与软件中断、可屏蔽中断与不可屏蔽中断；</p>\n<p>&nbsp;</p>\n<p>3、&nbsp;ASCII码与BCD码（压缩BCD码/非压缩BCD码）、无符号数与有符号数（补码）；</p>\n<p>&nbsp;</p>\n<p>4、&nbsp;寄存器功用与指令功能（标志位相关指令（算数、逻辑、移位、条件转移）、堆栈相关指令、地址相关指令）；</p>\n<p>&nbsp;</p>\n<p>5、&nbsp;数据操作数/地址操作数种类与寻址方式；</p>\n<p>&nbsp;</p>\n<p>6、&nbsp;DB、DW伪指令与存储分配；</p>\n<p>&nbsp;</p>\n<p>7、&nbsp;8255（初始化、端口基本输入输出、C口位操作）、8253（基本结构、方式2/3）；</p>\n<p>&nbsp;</p>\n<p>8、&nbsp;采样与量化（采样误差与模拟输入信号最高频率）、ADC0809、DAC0832；</p>\n<p>&nbsp;</p>\n<p>9、&nbsp;PID控制各分量意义与作用、数字PID控制器改进措施；</p>\n<p>&nbsp;</p>\n<p>10、差分变换法（前向差分/后向差分）、数字控制器的算法实现（直接程序设计/串行程序设计/并行程序设计）；</p>\n<p>&nbsp;</p>\n<p>11、干扰与抗干扰、软件抗干扰；</p>\n<p>&nbsp;</p>\n<p>12、可编程控制基础、梯形图与语句表。</p>\n<p></p>"},{"title":"微机与控制：小测验题样","date":"2012-03-31 21:11:58","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xuhg.html","content":"<p>1。8086 CPU中哪些寄存器称为通用寄存器？</p>\n<p><font color=\"#FF0000\">答：8个16位寄存器AX、BX、CX、DX、SP、BP、SI和DI称为通用寄存器。</font>2。执下列程序段执行后，求AL寄存器的内容：\n&nbsp;&nbsp;MOV AL，0B7H&nbsp;&nbsp;SHL AL，1&nbsp;&nbsp;SHR AL，1</p>\n<p><font color=\"#FF0000\">答：结果(AL)=37H</font></p>\n<p><font color=\"#FF0000\">(初始(AL)=0B7H=10110111B；逻辑左移一位则最高位移出(至CF)，最低位补<font color=\"#4D6DF3\">0</font>，于是(AL)=0110111<font color=\"#4D6DF3\">0</font>B；再逻辑右移一位则最低位移出(至CF)，最高位补<font color=\"#4D6DF3\">0</font>，于是最终(AL)=<font color=\"#4D6DF3\">0</font>0110111B=37H)</font>3。逻辑地址07F0H：1A40H对应的物理地址是多少？</p>\n<p><font color=\"#FF300D\">答：物理地址=段地址*10H+偏移地址=07F0H*10H+1A40H=07F00H+1A40H=09940H</font></p>"},{"title":"微机与控制：结课考试题样A","date":"2012-03-30 16:07:19","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xtdg.html","content":"<p><font style=\"FonT-siZe: 22px\"><b><u>结课考试题样</u></b></font></p>\n<p><b>一、填空题</b></p>\n<p>1. 8088微处理器内部地址总线是(<u>&nbsp;&nbsp;<font color=\"#FF0000\">16</font>&nbsp;&nbsp;</u>\n)条，而外部地址总线是20条，为了形成20位物理地址，存储器采用了(<u>&nbsp;</u>\n<u><font color=\"#FF0000\">分段</font>&nbsp;</u> )结构。</p>\n<p>&nbsp;</p>\n<p><b>二、选择题</b></p>\n<p>\n1．可通过发射超声波并接收测量反射波的延迟时间计算出(<u>&nbsp;&nbsp;<font color=\"#FF0000\">A</font>&nbsp;&nbsp;</u> )。</p>\n<p>\nA：到被测物体的距离&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B：被测物体表面温度</p>\n<p>\nC：被测物体的波反射率&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D：被测物体的振动频率；</p>\n<p>&nbsp;</p>\n<p><b>三、简答题</b></p>\n<p>1. 标号有哪三种属性？</p>\n<p><font color=\"#FF0000\">答：标号有段、偏移量和类型等三种属性。</font></p>\n<p>&nbsp;</p>\n<p><b>四、应用与编程</b></p>\n<p>1. 试编写子程序求取AX寄存器和BX寄存器中两个有符号二进制数的绝对值的和到BX寄存器中。</p>\n<p><font color=\"#FF0000\">ABS&nbsp;&nbsp;&nbsp;PROC</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR\nAX,AX&nbsp;&nbsp;&nbsp;；使结果影响标志位</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNS\nNXT1&nbsp;&nbsp;&nbsp;；标志位SF=0则转移（说明AX中的数是正数，正数的绝对值就是其自身）</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NEG\nAX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;；因SF=1所以AX中原来的数是负数，求负数绝对值的办法就是用0减去这个负数</font></p>\n<p><font color=\"#FF0000\">NXT1:&nbsp; OR\nBX,BX&nbsp;&nbsp;&nbsp;；以下用类似的办法求BX中原来数的绝对值到BX中</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNS\nNXT2</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NEG\nBX</font></p>\n<p><font color=\"#FF0000\">NXT2:&nbsp; ADD\nBX,AX&nbsp;&nbsp; ；求两个绝对值的和到BX中</font></p>\n<p><font color=\"#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RET</font></p>\n<p><font color=\"#FF0000\">ABS&nbsp;&nbsp;&nbsp;ENDP</font></p>"},{"title":"微机与控制：要求重点掌握的CPU引脚","date":"2012-03-29 22:33:01","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xsqr.html","content":"<p><font style=\"FonT-siZe: 20px\"><strong>以下8086/8088引脚值得重点关注</strong>：</font></p>\n<p><font color=\"#FF0000\">NMI</font></p>\n<p><font color=\"#FF0000\">INTR</font></p>\n<p><font color=\"#FF0000\">RESET</font></p>\n<p><font color=\"#FF0000\">-RD</font></p>\n<p><font color=\"#FF0000\">-WR</font></p>\n<p><font color=\"#FF0000\">-INTA</font></p>\n<p><font color=\"#FF0000\">ALE</font></p>\n<p><font color=\"#FF0000\">M/-IO</font>（或对8088为<font color=\"#FF0000\">IO/-M</font>）</p>\n<p><font color=\"#FF0000\">AD15~AD0</font>（或对8088为<font color=\"#FF0000\">A15~A8</font>、<font color=\"#FF0000\">AD7~AD0</font>）</p>\n<p>-BHE（仅对8086）</p>"},{"title":"微机与控制：要求重点掌握的伪指令","date":"2012-03-29 22:17:10","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xsqi.html","content":"<p><font style=\"FonT-siZe: 18px\"><strong>MASM的伪指令分类（<font color=\"#ED1C24\">红色为要求重点掌握</font>）</strong></font></p>\n<p>&ndash;数据定义伪指令</p>\n<p>&raquo;<font color=\"#FF0000\">DB ，DW ，DD</font> ，DF ，DQ ，DT 等；</p>\n<p>&ndash;符号定义伪指令</p>\n<p>&raquo;名字&nbsp; <font color=\"#FF0000\">EQU</font>&nbsp;&nbsp; 表达式</p>\n<p>&raquo;名字= 表达式</p>\n<p>&raquo;名字&nbsp; LABLE&nbsp;&nbsp;类型</p>\n<p>&ndash;段定义伪指令</p>\n<p>&raquo;段名 <font color=\"#FF0000\">SEGMENT</font></p>\n<p><font color=\"#FF0000\"><font color=\"#000000\">&raquo;段名</font>\nENDS</font></p>\n<p>&raquo;ASSUME</p>\n<p>&ndash;过程定义伪指令</p>\n<p>&raquo;过程名 <font color=\"#FF0000\">PROC</font>&nbsp;&nbsp;［NEAR/FAR］</p>\n<p>&raquo;过程名 <font color=\"#FF0000\">ENDP</font></p>\n<p>&ndash;模块定义与连接伪指令</p>\n<p>&raquo;<font color=\"#FF0000\">END&nbsp;</font> <font color=\"#000000\">［标号］</font></p>\n<p>&raquo;另有NAME、PUBLIC和EXTRN等</p>\n<p>&nbsp;</p>\n<p>####另：以下各类伪指令一般无具体要求</p>\n<p>&ndash;宏处理伪指令&ndash;处理器选择伪指令&ndash;条件伪指令&ndash;列表伪指令&ndash;其它伪指令</p>"},{"title":"微机与控制：要求重点掌握的汇编指令","date":"2012-03-29 22:09:04","cate":"微机","tags":[],"link":"http://blog.sina.com.cn/s/blog_553fab3b0100xsq5.html","content":"<font style=\"FonT-siZe: 18px\"><strong>8086/8088的指令种类（<font color=\"#ED1C24\">红色为要求重点掌握</font>）</strong></font>\n<p>&ndash;1 、数据传送类：</p>\n<p>&raquo;<font color=\"#ED1C24\">MOV 、PUSH 、POP 、XCHG 、XLAT 、IN\n、OUT</font>&nbsp;；</p>\n<p>&raquo;<font color=\"#ED1C24\">LEA 、LDS 、LES</font></p>\n<p>&raquo;LAHF 、SAHF 、POPF 、PUSHF</p>\n<p>&ndash;2 、算术运算指令：</p>\n<p>&raquo;<font color=\"#ED1C24\">ADD 、ADC 、INC 、SUB 、SBB 、DEC 、CMP</font>\n、MUL 、IMUL 、DIV 、IDIV ；CBW 、CWD ；</p>\n<p>&raquo;AAA 、DAA 、AAS 、DAS 、AAM 、AAD；</p>\n<p>&ndash;3 、位操作指令</p>\n<p>&raquo;<font color=\"#ED1C24\">AND 、TEST 、OR 、XOR 、NOT</font> ；</p>\n<p>&raquo;<font color=\"#ED1C24\">SHL</font> 、SAL 、<font color=\"#ED1C24\">SHR</font> 、SAR ；<font color=\"#ED1C24\">ROL 、ROR 、RCL\n、RCR</font>；</p>\n<p>&ndash;4 、串操作指令</p>\n<p>&raquo;MOVS 、LODS 、STOS 、CMPS 、SCAS</p>\n<p>&ndash;5 、控制转移指令</p>\n<p>&raquo;<font color=\"#ED1C24\">JMP 、Jcc ；LOOP</font> 、LOOPE 、LOOPZ\n、LOOPNE 、LOOPNZ ；<font color=\"#ED1C24\">CALL 、RET ；INT n</font></p>\n<p>&ndash;6 、处理器控制指令</p>\n<p>&raquo;<font color=\"#ED1C24\">CLC 、STC 、CMC 、CLD 、STD 、CLI\n、STI</font>；</p>\n<p>&raquo;<font color=\"#ED1C24\">HLT</font> 、WAIT 、ESC 、LOCK；</p>\n<p>&raquo;<font color=\"#ED1C24\">NOP</font>；</p>"}],"title":"儒雅品佳","link":"http://blog.sina.com.cn/u/1430235963"}